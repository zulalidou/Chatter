[{"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\index.js":"1","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\App.js":"2","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\page-not-found.js":"3","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\login.js":"4","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\signup.js":"5","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\activate-account.js":"6","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\forgot-password.js":"7","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\landing.js":"8","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\password-successfully-reset.js":"9","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\reset-password.js":"10","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\set-new-password.js":"11","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\show-no-groups.js":"12","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\show-groups.js":"13","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\create-room.js":"14","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\create-group.js":"15","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\navbar-menu.js":"16","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\notifications-box.js":"17","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\leave-group.js":"18","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\message-box.js":"19","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\groups.js":"20","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\home.js":"21","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\users-online.js":"22","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\error.js":"23","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\random-room.js":"24","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\navbar.js":"25","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\group-room.js":"26","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\profile.js":"27","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\random-chat.js":"28","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\become-admin.js":"29","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\delete-account.js":"30","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\group.js":"31","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\invite-user.js":"32","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\loading.js":"33","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\modify-profile-info.js":"34","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\invitation-sent.js":"35","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\access-group-denied.js":"36","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\group-invitation-received.js":"37"},{"size":148,"mtime":1619044712745,"results":"38","hashOfConfig":"39"},{"size":3235,"mtime":1626417493300,"results":"40","hashOfConfig":"39"},{"size":2096,"mtime":1627350859234,"results":"41","hashOfConfig":"39"},{"size":3735,"mtime":1627705909835,"results":"42","hashOfConfig":"39"},{"size":7142,"mtime":1627705829518,"results":"43","hashOfConfig":"39"},{"size":5656,"mtime":1627705859191,"results":"44","hashOfConfig":"39"},{"size":3039,"mtime":1627705875410,"results":"45","hashOfConfig":"39"},{"size":1285,"mtime":1627350775596,"results":"46","hashOfConfig":"39"},{"size":980,"mtime":1626175022189,"results":"47","hashOfConfig":"39"},{"size":5394,"mtime":1627705928920,"results":"48","hashOfConfig":"39"},{"size":3601,"mtime":1627705945346,"results":"49","hashOfConfig":"39"},{"size":364,"mtime":1625971925628,"results":"50","hashOfConfig":"39"},{"size":1466,"mtime":1627350734982,"results":"51","hashOfConfig":"39"},{"size":5450,"mtime":1629789000977,"results":"52","hashOfConfig":"39"},{"size":3672,"mtime":1627785929913,"results":"53","hashOfConfig":"39"},{"size":819,"mtime":1626238182348,"results":"54","hashOfConfig":"39"},{"size":5490,"mtime":1627615847098,"results":"55","hashOfConfig":"39"},{"size":3206,"mtime":1627785997568,"results":"56","hashOfConfig":"39"},{"size":2382,"mtime":1627350459095,"results":"57","hashOfConfig":"39"},{"size":5971,"mtime":1627785972043,"results":"58","hashOfConfig":"39"},{"size":6658,"mtime":1629959429532,"results":"59","hashOfConfig":"39"},{"size":1346,"mtime":1627350742065,"results":"60","hashOfConfig":"39"},{"size":1770,"mtime":1627350148424,"results":"61","hashOfConfig":"39"},{"size":12296,"mtime":1629788936909,"results":"62","hashOfConfig":"39"},{"size":9645,"mtime":1627786019248,"results":"63","hashOfConfig":"39"},{"size":7800,"mtime":1629788981285,"results":"64","hashOfConfig":"39"},{"size":8559,"mtime":1627786028533,"results":"65","hashOfConfig":"39"},{"size":11745,"mtime":1627786033621,"results":"66","hashOfConfig":"39"},{"size":3010,"mtime":1629789052685,"results":"67","hashOfConfig":"39"},{"size":4542,"mtime":1627785946385,"results":"68","hashOfConfig":"39"},{"size":18369,"mtime":1627785966251,"results":"69","hashOfConfig":"39"},{"size":8677,"mtime":1629788959358,"results":"70","hashOfConfig":"39"},{"size":155,"mtime":1625932676838,"results":"71","hashOfConfig":"39"},{"size":8067,"mtime":1627790199628,"results":"72","hashOfConfig":"39"},{"size":1672,"mtime":1627350391739,"results":"73","hashOfConfig":"39"},{"size":1426,"mtime":1629347576650,"results":"74","hashOfConfig":"39"},{"size":3978,"mtime":1627785953506,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"h22xgi",{"filePath":"79","messages":"80","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"78"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\index.js",[],["175","176"],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\App.js",["177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193"],"import React from 'react'\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\"\r\n\r\nimport Landing from \"./components/logged-out/landing\"\r\nimport Login from \"./components/logged-out/login\"\r\nimport Signup from \"./components/logged-out/signup\"\r\nimport ActivateAccount from \"./components/logged-out/activate-account\"\r\nimport ForgotPassword from \"./components/logged-out/forgot-password\"\r\nimport ResetPassword from \"./components/logged-out/reset-password\"\r\nimport SetNewPassword from \"./components/logged-out/set-new-password\"\r\nimport PasswordSuccessfullyReset from \"./components/logged-out/password-successfully-reset\"\r\n\r\n\r\nimport Navbar from \"./components/logged-in/navbar\"\r\nimport Home from \"./components/logged-in/home\"\r\nimport Groups from \"./components/logged-in/groups\"\r\nimport Group from \"./components/logged-in/group\"\r\nimport RandomRoom from \"./components/logged-in/random-room\"\r\nimport UsersOnline from \"./components/logged-in/users-online\"\r\nimport GroupRoom from \"./components/logged-in/group-room\"\r\nimport CreateRoom from \"./components/logged-in/create-room\"\r\nimport CreateGroup from \"./components/logged-in/create-group\"\r\nimport ShowGroups from \"./components/logged-in/show-groups\"\r\nimport ShowNoGroups from \"./components/logged-in/show-no-groups\"\r\nimport RandomChat from \"./components/logged-in/random-chat\"\r\nimport Profile from \"./components/logged-in/profile\"\r\nimport InviteUser from \"./components/logged-in/invite-user\"\r\nimport MessageBox from \"./components/logged-in/message-box\"\r\n\r\nimport NotificationsBox from \"./components/logged-in/notifications-box\"\r\nimport NavbarMenu from \"./components/logged-in/navbar-menu\"\r\n\r\n\r\nimport BecomeAdmin from \"./components/logged-in/become-admin\"\r\nimport LeaveGroup from \"./components/logged-in/leave-group\"\r\n\r\nimport DeleteAccount from \"./components/logged-in/delete-account\"\r\nimport PageNotFound from \"./components/page-not-found\"\r\nimport Error from \"./components/logged-in/error\"\r\n\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Route path=\"/\" component={Navbar} />\r\n\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Landing} />\r\n\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <Route exact path=\"/signup\" component={Signup} />\r\n                    <Route exact path=\"/activate-account\" component={ActivateAccount} />\r\n                    <Route exact path=\"/forgot-password\" component={ForgotPassword} />\r\n                    <Route exact path=\"/reset-password\" component={ResetPassword} />\r\n\r\n                    <Route exact path=\"/profile\" component={Profile} />\r\n\r\n                    <Route exact path=\"/home\" component={Home} />\r\n                    <Route exact path=\"/random-chat\" component={RandomChat} />\r\n\r\n                    <Route exact path=\"/groups\" component={Groups} />\r\n                    <Route exact path=\"/group/:id/:room_name\" component={Group} />\r\n\r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\page-not-found.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\login.js",["194"],"import React from 'react'\r\nimport { Link, Redirect } from \"react-router-dom\"\r\nimport Cookies from \"js-cookie\"\r\n\r\nimport \"../../styles/login.css\"\r\n\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.login = this.login.bind(this)\r\n        this.hideErrorMessages = this.hideErrorMessages.bind(this)\r\n    }\r\n\r\n\r\n    async login() {\r\n        this.hideErrorMessages()\r\n\r\n        const email = document.getElementById(\"lf-email-input\").value\r\n        const password = document.getElementById(\"lf-password-input\").value\r\n\r\n        let isFormFilled = true\r\n\r\n        if (email === \"\") {\r\n            isFormFilled = false\r\n            document.getElementById('login-error-msg-1').style.visibility = \"visible\"\r\n        }\r\n\r\n        if (password === \"\") {\r\n            isFormFilled = false\r\n            document.getElementById('login-error-msg-2').style.visibility = \"visible\"\r\n            document.getElementById('login-error-msg-2').innerText = \"This field is required\"\r\n        }\r\n\r\n        if (!isFormFilled)\r\n            return\r\n\r\n\r\n\r\n        const response = await fetch(\"/api/login\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({email: email, password: password})\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            document.getElementById('login-error-msg-2').style.visibility = \"visible\"\r\n            document.getElementById('login-error-msg-2').innerText = \"Incorrect email and/or password\"\r\n            return\r\n        }\r\n\r\n        this.props.history.push(\"/home\")\r\n    }\r\n\r\n\r\n    hideErrorMessages() {\r\n        document.getElementById('login-error-msg-1').style.visibility = \"hidden\"\r\n        document.getElementById('login-error-msg-2').style.visibility = \"hidden\"\r\n    }\r\n\r\n\r\n    render() {\r\n        if (Cookies.get(\"jwtHP\") !== undefined) {\r\n            return <Redirect to=\"/home\"/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"login-container\">\r\n                <form className=\"login-form\">\r\n                    <div className=\"lf-title-container\">\r\n                        <h2>Log In</h2>\r\n                    </div>\r\n\r\n                    <div className=\"lf-body\">\r\n                        <div className=\"lf-email-container\">\r\n                            <label htmlFor=\"lf-email-input\">Email</label>\r\n                            <br/>\r\n                            <input type=\"email\" name=\"email\" className=\"login-input\" id=\"lf-email-input\" required/>\r\n                            <p id=\"login-error-msg-1\">This field is required</p>\r\n                        </div>\r\n\r\n                        <div className=\"lf-password-container\">\r\n                            <label htmlFor=\"lf-password-input\">Password</label>\r\n                            <br/>\r\n                            <input type=\"password\" name=\"password\" className=\"login-input\" id=\"lf-password-input\" required/>\r\n                            <p id=\"login-error-msg-2\">This field is required</p>\r\n                            <Link to=\"/forgot-password\" className=\"login-form-link\">Forgot Password?</Link>\r\n                        </div>\r\n\r\n                        <button type=\"button\" className=\"login-btn\" onClick={this.login}>Log In</button>\r\n\r\n                        <hr/>\r\n\r\n                        <div className=\"center-item\">\r\n                            <Link to=\"/signup\" className=\"login-form-link\">Create an account</Link>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Login\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\signup.js",["195","196","197","198"],"import React from \"react\"\r\nimport { Link, Redirect } from \"react-router-dom\"\r\n\r\nimport Error from \"../logged-in/error.js\"\r\nimport Cookies from \"js-cookie\"\r\n\r\nimport \"../../styles/signup.css\"\r\n\r\n\r\nclass Signup extends React.Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            displayError: false\r\n        }\r\n\r\n        this.validateForm = this.validateForm.bind(this)\r\n        this.hideErrorMessages = this.hideErrorMessages.bind(this)\r\n        this.isEmpty = this.isEmpty.bind(this)\r\n        this.isValid = this.isValid.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async validateForm() {\r\n        this.hideErrorMessages()\r\n\r\n        const name = document.getElementById(\"signup-name-input\").value\r\n        const username = document.getElementById(\"signup-username-input\").value\r\n        const email = document.getElementById(\"signup-email-input\").value.toLowerCase()\r\n        const password = document.getElementById(\"signup-password-input\").value\r\n\r\n        const nameEmpty = this.isEmpty(name, \"signup-error-msg-1\")\r\n        const usernameEmpty = this.isEmpty(username, \"signup-error-msg-2\")\r\n        const emailEmpty = this.isEmpty(email, \"signup-error-msg-3\")\r\n        const passwordEmpty = this.isEmpty(password, \"signup-error-msg-4\")\r\n\r\n        if (nameEmpty || usernameEmpty || emailEmpty || passwordEmpty)\r\n            return\r\n\r\n\r\n        if (username.length < 6) {\r\n            document.getElementById('signup-error-msg-2').innerHTML = \"Needs to be at least 6 characters\"\r\n            document.getElementById('signup-error-msg-2').style.visibility = \"visible\"\r\n            return\r\n        }\r\n\r\n        if (!this.isValid(email)) {\r\n            document.getElementById('signup-error-msg-3').innerHTML = \"This is not a valid email address\"\r\n            document.getElementById('signup-error-msg-3').style.visibility = \"visible\"\r\n            return\r\n        }\r\n\r\n        if (password.length < 8) {\r\n            document.getElementById('signup-error-msg-4').innerHTML = \"The password must be at least 8 characters long\"\r\n            document.getElementById('signup-error-msg-4').style.visibility = \"visible\"\r\n            return\r\n        }\r\n\r\n\r\n\r\n\r\n        const response = await fetch(\"/api/signup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({name: name, username: username, email: email, password: password})\r\n        })\r\n\r\n\r\n        const responseMsg = await response.text()\r\n\r\n        if (response.status !== 200) {\r\n            if (responseMsg === \"Username taken\") {\r\n                document.getElementById('signup-error-msg-2').innerHTML = \"This username is already taken\"\r\n                document.getElementById('signup-error-msg-2').style.visibility = \"visible\"\r\n                return\r\n            }\r\n\r\n            if (responseMsg === \"Email taken\") {\r\n                document.getElementById('signup-error-msg-3').innerHTML = \"This email is already taken\"\r\n                document.getElementById('signup-error-msg-3').style.visibility = \"visible\"\r\n                return\r\n            }\r\n\r\n            this.setState({displayError: true})\r\n            return\r\n        }\r\n\r\n\r\n        this.props.history.push({\r\n            pathname: '/activate-account',\r\n            state: {\r\n                email: email\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    hideErrorMessages() {\r\n        document.getElementById(\"signup-error-msg-1\").style.visibility = \"hidden\"\r\n        document.getElementById(\"signup-error-msg-2\").style.visibility = \"hidden\"\r\n        document.getElementById(\"signup-error-msg-3\").style.visibility = \"hidden\"\r\n        document.getElementById(\"signup-error-msg-4\").style.visibility = \"hidden\"\r\n    }\r\n\r\n\r\n    isEmpty(value, containerName) {\r\n        if (value === \"\") {\r\n            document.getElementById(containerName).style.visibility = \"visible\"\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n\r\n    isValid(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        return re.test(email)\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (Cookies.get(\"jwtHP\") !== undefined) {\r\n            return <Redirect to=\"/home\"/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <form className=\"signup-form\">\r\n                    <div className=\"sf-title-container\">\r\n                        <h2>Create an account</h2>\r\n                    </div>\r\n\r\n                    <div className=\"sf-body\">\r\n                        <div className=\"sf-name-container\">\r\n                            <label htmlFor=\"signup-name-input\">Your name</label>\r\n                            <br/>\r\n                            <input type=\"text\" className=\"signup-input\" id=\"signup-name-input\" autoComplete=\"off\" required/>\r\n                            <div id=\"signup-error-msg-1\">Please fill out this field</div>\r\n                        </div>\r\n\r\n                        <div className=\"sf-username-container\">\r\n                            <label htmlFor=\"signup-username-input\">Username</label>\r\n                            <br/>\r\n                            <input type=\"text\" className=\"signup-input\" id=\"signup-username-input\" autoComplete=\"off\" required/>\r\n                            <div id=\"signup-error-msg-2\">Please fill out this field</div>\r\n                        </div>\r\n\r\n                        <div className=\"sf-email-container\">\r\n                            <label htmlFor=\"signup-email-input\">Email</label>\r\n                            <br/>\r\n                            <input type=\"email\" className=\"signup-input\" id=\"signup-email-input\" autoComplete=\"off\" required/>\r\n                            <div id=\"signup-error-msg-3\">Please fill out this field</div>\r\n                        </div>\r\n\r\n                        <div className=\"sf-password-container\">\r\n                            <label htmlFor=\"signup-password-input\">Password</label>\r\n                            <br/>\r\n                            <input type=\"password\" className=\"signup-input\" id=\"signup-password-input\" autoComplete=\"off\" required/>\r\n                            <div id=\"signup-error-msg-4\">Please fill out this field</div>\r\n                        </div>\r\n\r\n                        <button className=\"signup-btn\" type=\"button\" onClick={this.validateForm}>Sign Up</button>\r\n\r\n                        <hr/>\r\n\r\n                        <div className=\"center-item\">\r\n                            <Link to=\"/login\" className=\"signup-form-link\">Already have an account? Log in here</Link>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Signup\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\activate-account.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\forgot-password.js",["199","200","201","202"],"import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport Cookies from \"js-cookie\"\r\n\r\nimport \"../../styles/forgot-password.css\"\r\n\r\n\r\nclass ForgotPassword extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.sendPasswordResetEmail = this.sendPasswordResetEmail.bind(this)\r\n        this.hideErrorMessages = this.hideErrorMessages.bind(this)\r\n        this.isValid = this.isValid.bind(this)\r\n        this.handleKeyPress = this.handleKeyPress.bind(this)\r\n    }\r\n\r\n\r\n    async sendPasswordResetEmail() {\r\n        this.hideErrorMessages()\r\n\r\n        const email = document.getElementById('fp-email-input').value\r\n\r\n        if (email === '') {\r\n            document.getElementById('fp-error-msg').innerHTML = \"This field is required\"\r\n            document.getElementById('fp-error-msg').style.visibility = \"visible\"\r\n            return\r\n        }\r\n\r\n        if (!this.isValid(email)) {\r\n            document.getElementById('fp-error-msg').innerHTML = \"This is not a valid email address\"\r\n            document.getElementById('fp-error-msg').style.visibility = \"visible\"\r\n            return\r\n        }\r\n\r\n\r\n\r\n        fetch('/api/send-password-reset-code', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({email: email})\r\n        })\r\n\r\n        this.props.history.push({\r\n            pathname: '/reset-password',\r\n            state: {\r\n                email: email\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    hideErrorMessages() {\r\n        document.getElementById(\"fp-error-msg\").style.visibility = \"hidden\"\r\n    }\r\n\r\n\r\n    isValid(email) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        return re.test(email)\r\n    }\r\n\r\n\r\n    handleKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault()\r\n            this.sendPasswordResetEmail()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        if (Cookies.get(\"jwtHP\") !== undefined) {\r\n            return <Redirect to=\"/home\"/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"forgot-password-container\">\r\n                <form className=\"fp-form\">\r\n                    <div className=\"fp-title-container\">\r\n                        <h2>Forgot Your Password?</h2>\r\n                    </div>\r\n\r\n                    <div className=\"fp-body\">\r\n                        <label htmlFor=\"fp-email-input\">Enter your email address</label>\r\n                        <input type=\"email\" id=\"fp-email-input\" onKeyPress={this.handleKeyPress} required/>\r\n                        <p id='fp-error-msg'>This field is required</p>\r\n                        <button className=\"fp-btn\" type=\"button\" onClick={this.sendPasswordResetEmail}>Send code</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ForgotPassword\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\landing.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\password-successfully-reset.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\reset-password.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-out\\set-new-password.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\show-no-groups.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\show-groups.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\create-room.js",["203"],"import React from \"react\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport { withRouter } from \"react-router-dom\"\r\n\r\nimport Error from \"./error\"\r\nimport Cookies from \"js-cookie\"\r\nimport \"../../styles/create-room.css\"\r\n\r\n\r\nclass CreateRoom extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            displayError: false\r\n        }\r\n\r\n        this.createRoom = this.createRoom.bind(this)\r\n        this.hideErrorMessages = this.hideErrorMessages.bind(this)\r\n        this.getDate = this.getDate.bind(this)\r\n        this.getTime = this.getTime.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async createRoom() {\r\n        this.hideErrorMessages()\r\n\r\n        const roomName = document.getElementById(\"cr-room-name-input\").value.trim()\r\n        const roomPurpose = document.getElementById(\"cr-room-purpose-input\").value.trim()\r\n\r\n        if (roomName.trim() === '') {\r\n            document.getElementById(\"cr-error-message\").innerHTML = \"This field is required\"\r\n            document.getElementById(\"cr-error-message\").style.visibility = \"visible\"\r\n            return\r\n        }\r\n        else {\r\n            // check to see if the room name provided already exists\r\n            for (let i = 0; i < this.props.rooms.length; i++) {\r\n                if (this.props.rooms[i].name === roomName) {\r\n                    document.getElementById(\"cr-error-message\").innerHTML = \"This room already exists. Try a different name.\"\r\n                    document.getElementById(\"cr-error-message\").style.visibility = \"visible\"\r\n                    return\r\n                }\r\n            }\r\n\r\n\r\n            const newRoom = {\r\n                id: uuidv4(),\r\n                name: roomName,\r\n                purpose: roomPurpose,\r\n                groupID: this.props.groupID,\r\n                creator: this.props.creator,\r\n                date: this.getDate(),\r\n                time: this.getTime(),\r\n                groupRoom: true\r\n            }\r\n\r\n\r\n            const token = Cookies.get(\"XSRF-Token\")\r\n\r\n            const response = await fetch(\"/api/create-room\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"XSRF-Token\": token\r\n                },\r\n                body: JSON.stringify(newRoom)\r\n            })\r\n\r\n\r\n            try {\r\n                if (response.status !== 200)\r\n                    throw \"ERROR-OCCURRED\"\r\n            } catch (e) {\r\n                this.setState({displayError: true})\r\n                return\r\n            }\r\n\r\n\r\n            this.props.goToNewRoom(newRoom)\r\n        }\r\n    }\r\n\r\n\r\n    hideErrorMessages() {\r\n        document.getElementById(\"cr-error-message\").style.visibility = \"hidden\"\r\n    }\r\n\r\n\r\n    getDate() {\r\n      const dateObj = new Date();\r\n\r\n      const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ];\r\n\r\n      return `${months[dateObj.getMonth()]} ${dateObj.getDate()}, ${dateObj.getFullYear()}`;\r\n    }\r\n\r\n\r\n    getTime() {\r\n        let dateObj = new Date()\r\n        return dateObj.getTime()\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* The purpose of the div immediately below is to provide a slightly dark background for when this component becomes visible */}\r\n                <div className=\"dark-background\" onClick={this.props.closeComponent}>\r\n                </div>\r\n\r\n                <form className=\"create-room-form\">\r\n                    <div className=\"cr-form-top\">\r\n                        <div className=\"cr-form-title\">\r\n                            <h3>Create a room</h3>\r\n                        </div>\r\n\r\n                        <div className=\"cr-form-closer\">\r\n                            <button className=\"cr-close-form-btn\" type=\"button\" onClick={this.props.closeComponent}>&#10006;</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr/>\r\n\r\n                    <div className=\"cr-form-middle\">\r\n                        <label>Name</label> <br/>\r\n                        <input id=\"cr-room-name-input\" placeholder=\"e.g. games\" autoComplete=\"off\"/> <br/>\r\n                        <p id=\"cr-error-message\">This field is required</p>\r\n                        <br/>\r\n\r\n                        <label>Purpose (optional)</label> <br/>\r\n                        <input id=\"cr-room-purpose-input\" autoComplete=\"off\"/>\r\n                    </div>\r\n\r\n                    <div className=\"cr-form-bottom\">\r\n                        <div className=\"cr-form-bottom-container\">\r\n                            <button className=\"cr-form-bottom-btn cr-btn-1\" type=\"button\" onClick={this.props.closeComponent}>Cancel</button>\r\n                            <button className=\"cr-form-bottom-btn cr-btn-2\" type=\"button\" onClick={this.createRoom}>Create</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(CreateRoom)\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\create-group.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\navbar-menu.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\notifications-box.js",["204","205"],"import React from 'react'\r\nimport { withRouter } from \"react-router-dom\"\r\n\r\nimport Error from \"./error\"\r\nimport Loading from \"./loading\"\r\n\r\nimport groupInvitationIcon from \"../../images/group-invitation.png\"\r\nimport \"../../styles/notifications-box.css\"\r\n\r\n\r\nclass NotificationsBox extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            notificationsFetched: false,\r\n            notifications: [],\r\n            displayError: false,\r\n            stateLoaded: false\r\n        }\r\n\r\n        this.handleNotification = this.handleNotification.bind(this)\r\n        this.deleteNotification = this.deleteNotification.bind(this)\r\n        this.convertTime = this.convertTime.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (!this.state.notificationsFetched) {\r\n            const response = await fetch(`/api/get-notifications?userID=${this.props.userID}`)\r\n\r\n            try {\r\n                if (response.status !== 200)\r\n                    throw \"ERROR-OCCURRED\"\r\n            } catch (e) {\r\n                this.setState({displayError: true})\r\n                return\r\n            }\r\n\r\n            const notifications = await response.json()\r\n            this.setState({notifications: notifications, notificationsFetched: true, stateLoaded: true})\r\n        }\r\n    }\r\n\r\n\r\n    async handleNotification(notification) {\r\n        if (notification.type === \"group-invitation\") {\r\n            this.props.history.push({\r\n                pathname: `/group/${notification.groupID}/main`,\r\n                state: {\r\n                    groupName: notification.groupName,\r\n                    groupID: notification.groupID,\r\n                    currentRoomName: \"main\",\r\n                    userReceivedInvitation: true\r\n                }\r\n            })\r\n        }\r\n        else if (notification.type === \"group-room-message\") {\r\n            const status = await this.deleteNotification(notification.id)\r\n\r\n            if (status === \"ERROR-OCCURRED\")\r\n                return\r\n\r\n            this.props.history.push({\r\n                pathname: `/group/${notification.groupID}/${notification.roomName}`,\r\n                state: {\r\n                    groupName: notification.groupName,\r\n                    groupID: notification.groupID,\r\n                    currentRoomName: `${notification.roomName}`\r\n                }\r\n            })\r\n        }\r\n        else  { // random-room-message\r\n            const status = await this.deleteNotification(notification.id)\r\n\r\n            if (status === \"ERROR-OCCURRED\")\r\n                return\r\n\r\n            this.props.history.push({\r\n                pathname: \"/random-chat\",\r\n                state: {\r\n                    roomID: `${notification.roomID}`,\r\n                    roomName: `${notification.roomName}`,\r\n                    user2: `${notification.senderID}`\r\n                }\r\n            })\r\n        }\r\n\r\n        this.props.closeComponent()\r\n    }\r\n\r\n\r\n    async deleteNotification(notificationID) {\r\n        const response = await fetch(`/api/delete-notification-2?notificationID=${notificationID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    convertTime(epochTime) {\r\n        let currentDate = new Date(epochTime).toLocaleString()\r\n        currentDate = currentDate.split(\",\")\r\n\r\n        const seconds = currentDate[1].substring(currentDate[1].lastIndexOf(\":\"), currentDate[1].lastIndexOf(\":\") + 3)\r\n        const time = currentDate[1].replace(seconds, \"\")\r\n        return time\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.stateLoaded)\r\n            return <Loading/>\r\n\r\n        return (\r\n            <div className=\"notifications-container\">\r\n                <h3>\r\n                    <strong>Notifications</strong>\r\n                </h3>\r\n\r\n                {(this.state.notificationsFetched && this.state.notifications.length > 0) ?\r\n\r\n                    this.state.notifications.map(notification =>\r\n\r\n                        <div key={notification.id} className=\"notification\"  onClick={() => this.handleNotification(notification)}>\r\n                            <div className=\"notification-top\">\r\n                                <img className=\"rounded\" src={groupInvitationIcon} alt=\"group invitation\"/>\r\n\r\n                                <div className=\"notification-message\">\r\n                                    {notification.message}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"notification-bottom\">\r\n                                <strong>{notification.date} &middot; {this.convertTime(notification.time)}</strong>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n\r\n                    :\r\n\r\n                    <div className=\"notification\">\r\n                        There are no notifications.\r\n                    </div>\r\n                }\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(NotificationsBox)\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\leave-group.js",["206"],"import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nimport Error from \"./error\"\r\nimport Cookies from \"js-cookie\"\r\nimport \"../../styles/leave-group.css\"\r\n\r\n\r\nclass LeaveGroup extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            leftGroup: false,\r\n            displayError: false\r\n        }\r\n\r\n        this.leaveGroup = this.leaveGroup.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async leaveGroup() {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch(\"/api/leave-group\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({userID: this.props.userID, groupID: this.props.groupID})\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return\r\n        }\r\n\r\n        this.setState({leftGroup: true})\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.leftGroup) {\r\n            return (\r\n                <Redirect to=\"/groups\"/>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"leave-group-container\">\r\n                {/* The purpose of the div immediately below is to provide a slightly dark background for when this component becomes visible */}\r\n                <div className=\"dark-background\" onClick={this.props.closeComponent}>\r\n                </div>\r\n\r\n                <form className=\"leave-group-form\">\r\n                    <div className=\"lg-form-top\">\r\n                        <div className=\"lg-form-title\">\r\n                            <h2>Leave <em>{this.props.groupName}</em></h2>\r\n                        </div>\r\n\r\n                        <div className=\"lg-form-closer\">\r\n                            <button className=\"lg-close-form-btn\" type=\"button\" onClick={this.props.closeComponent}>&#10006;</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr/>\r\n\r\n                    <div className=\"lg-form-middle\">\r\n                        <p>Are you sure you want to leave the group? You'll no longer have access to any of the data and features associated with it.</p>\r\n                    </div>\r\n\r\n                    <div className=\"lg-form-bottom\">\r\n                        <div className=\"lg-form-bottom-container\">\r\n                            <button className=\"lg-form-bottom-btn lg-btn-1\" type=\"button\" onClick={this.props.closeComponent}>Cancel</button>\r\n                            <button className=\"lg-form-bottom-btn lg-btn-2\" type=\"button\" onClick={this.leaveGroup}>Leave Group</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default LeaveGroup\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\message-box.js",["207"],"import React from 'react'\r\nimport \"../../styles/message-box.css\"\r\nimport { generateFromString } from \"generate-avatar\"\r\n\r\n\r\nclass MessageBox extends React.Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n\r\n    render() {\r\n        /* This is a container returned to a user to let them know that the other user they're chatting with has disconnected -\r\n           in other words, they've either logged out, or their session ended*/\r\n        if (this.props.senderID === \"N/A\") {\r\n            return (\r\n                <div id=\"user-disconnected-container\">\r\n                    {this.props.message.toUpperCase()}\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        /* This contains the time at which a user sent a message, along with their actual message. */\r\n        else if (this.props.avatarString === undefined) {\r\n            return (\r\n                <div className=\"message-container\">\r\n                    <div id=\"time-container\">\r\n                        {this.props.time}\r\n                    </div>\r\n\r\n                    <div className=\"text-container\">\r\n                        {this.props.message}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        /* This returns the user's profile img, along with a container containing their username and the date and time at which\r\n           they sent their message, and finally a container that contains their actual message*/\r\n        return (\r\n            <div className=\"message-container\">\r\n                <div id=\"avatar-container\">\r\n                    <img id=\"avatar-img\" src={`data:image/svg+xml;utf8,${generateFromString(this.props.avatarString)}`} alt=\"user profile avatar\"/>\r\n                </div>\r\n\r\n                <div id=\"username-and-text-container\">\r\n                    <div id=\"username-container\">\r\n                        <div>\r\n                            <strong>{this.props.username}</strong>\r\n                        </div>\r\n\r\n                        <div id=\"date-and-time-container\">\r\n                            {this.props.date} - {this.props.time}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"text-container\">\r\n                        {this.props.message}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MessageBox\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\groups.js",["208","209","210"],"import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nimport jwt_decode from 'jwt-decode'\r\nimport Cookies from 'js-cookie'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport ShowGroups from './show-groups'\r\nimport CreateGroup from './create-group'\r\nimport Loading from \"./loading\"\r\nimport Error from \"./error\"\r\n\r\nimport \"../../styles/groups.css\"\r\n\r\n\r\nclass Groups extends React.Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            userID: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).userID,\r\n            groups: [],\r\n            showCreateGroupComponent: false,\r\n            stateLoaded: false,\r\n            displayError: false\r\n        }\r\n\r\n        this.getRoomID = this.getRoomID.bind(this)\r\n        this.setRoomID = this.setRoomID.bind(this)\r\n        this.getGroups = this.getGroups.bind(this)\r\n        this.toggleCreateGroupComponent = this.toggleCreateGroupComponent.bind(this)\r\n        this.addNewGroup = this.addNewGroup.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (Cookies.get(\"jwtHP\") === undefined) {\r\n            this.setState({isLoggedIn: false})\r\n            return\r\n        }\r\n\r\n\r\n        ////////////////////////////////////////////////////\r\n        let currentRoomOpen = await this.getRoomID()\r\n\r\n        if (currentRoomOpen === \"ERROR-OCCURRED\") {\r\n            this.setState({stateLoaded: true})\r\n            return\r\n        }\r\n\r\n        if (currentRoomOpen !== \"\")\r\n            this.setRoomID(null)\r\n        ////////////////////////////////////////////////////\r\n\r\n\r\n        const groups = await this.getGroups(this.state.userID)\r\n\r\n        if (groups === \"ERROR-OCCURRED\") {\r\n            this.setState({stateLoaded: true})\r\n            return\r\n        }\r\n\r\n\r\n        groups.sort((a, b) => (a.time < b.time) ? -1 : 1)\r\n        this.setState({groups: groups, showCreateGroupComponent: false, stateLoaded: true})\r\n    }\r\n\r\n\r\n    async getRoomID() {\r\n        let response = await fetch(`/api/get-user-field-info?userID=${this.state.userID}&attribute=currentRoomOpen`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const roomID = await response.text()\r\n        return roomID\r\n    }\r\n\r\n\r\n    async setRoomID(roomID) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/set-user-info', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({userID: this.state.userID, attribute: 'currentRoomOpen', value: roomID})\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n        }\r\n    }\r\n\r\n\r\n    async getGroups(userID) {\r\n        const response = await fetch(`/api/get-groups?userID=${userID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const groups = await response.json()\r\n        return groups\r\n    }\r\n\r\n\r\n    toggleCreateGroupComponent() {\r\n        this.setState({showCreateGroupComponent: !this.state.showCreateGroupComponent})\r\n    }\r\n\r\n\r\n    async addNewGroup() {\r\n        const groups = await this.getGroups(this.state.userID)\r\n\r\n        if (groups === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n        groups.sort((a, b) => (a.time < b.time) ? -1 : 1)\r\n\r\n        this.setState({showCreateGroupComponent: false, groups: groups})\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.isLoggedIn)\r\n            return <Redirect to=\"/login\"/>\r\n\r\n        if (!this.state.stateLoaded)\r\n            return <Loading/>\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"left-container\">\r\n                    <h1>Groups</h1>\r\n                    <button className=\"create-group-btn\" onClick={this.toggleCreateGroupComponent}>Create a group</button>\r\n                </div>\r\n\r\n                <div className=\"right-container\">\r\n                    <h3 id=\"groups-header\">\r\n                        Groups\r\n                    </h3>\r\n\r\n                    <button className=\"create-group-btn\" onClick={this.toggleCreateGroupComponent}>\r\n                        Create a group\r\n                    </button>\r\n\r\n                    <h3 id=\"user-groups-header\">\r\n                        Your groups\r\n                    </h3>\r\n\r\n\r\n\r\n                    {this.state.groups.length === 0 ?\r\n                        <div className=\"groups-container\">\r\n                            Whoops! It looks like you're not part of any group. Start by creating a group, and invite your friends and family to it!\r\n                        </div>\r\n\r\n                        :\r\n\r\n                        <div>\r\n                            {\r\n                                this.state.groups.map(group => <ShowGroups key={uuidv4()} group={group} userID={this.state.userID} />)\r\n                            }\r\n                        </div>\r\n                    }\r\n\r\n                    {this.state.showCreateGroupComponent && <CreateGroup userID={this.state.userID} addNewGroup={this.addNewGroup} closeComponent={this.toggleCreateGroupComponent} />}\r\n                    {this.state.displayError && <Error closeComponent={this.toggleErrorComponent}/>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Groups\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\home.js",["211","212","213","214"],"import React from \"react\"\r\nimport { Link, Redirect } from \"react-router-dom\"\r\nimport Loading from \"./loading\"\r\nimport Error from './error'\r\n\r\nimport \"../../styles/home.css\"\r\n\r\n\r\nimport jwt_decode from \"jwt-decode\"\r\nimport Cookies from \"js-cookie\"\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            groupNumber: \"-\",\r\n            loggedInUsersNumber: \"-\",\r\n            displayError: false,\r\n            stateLoaded: false,\r\n            userID: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).userID\r\n        }\r\n\r\n        this.getRoomID = this.getRoomID.bind(this)\r\n        this.setRoomID = this.setRoomID.bind(this)\r\n        this.getGroupNumber = this.getGroupNumber.bind(this)\r\n        this.getLoggedInUsersNumber = this.getLoggedInUsersNumber.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (Cookies.get(\"jwtHP\") === undefined) {\r\n            this.setState({isLoggedIn: false})\r\n            return\r\n        }\r\n\r\n\r\n        ////////////////////////////////////////////////////\r\n        let currentRoomOpen = await this.getRoomID()\r\n\r\n        if (currentRoomOpen === \"ERROR-OCCURRED\") {\r\n            this.setState({stateLoaded: true})\r\n            return\r\n        }\r\n\r\n        if (currentRoomOpen !== '') {\r\n            const status = await this.setRoomID(null)\r\n\r\n            if (status === \"ERROR-OCCURRED\") {\r\n                this.setState({stateLoaded: true})\r\n                return\r\n            }\r\n        }\r\n        ////////////////////////////////////////////////////\r\n\r\n        const groupNumber = await this.getGroupNumber(this.state.userID)\r\n\r\n        if (groupNumber === \"ERROR-OCCURRED\") {\r\n            this.setState({stateLoaded: true})\r\n            return\r\n        }\r\n\r\n\r\n        const loggedInUsersNumber = await this.getLoggedInUsersNumber(this.state.userID)\r\n\r\n        if (loggedInUsersNumber === \"ERROR-OCCURRED\") {\r\n            this.setState({stateLoaded: true})\r\n            return\r\n        }\r\n\r\n\r\n        this.setState({\r\n            groupNumber: groupNumber,\r\n            loggedInUsersNumber: loggedInUsersNumber,\r\n            stateLoaded: true\r\n        })\r\n    }\r\n\r\n\r\n    async getRoomID() {\r\n        console.log(\"getRoomID()\")\r\n        const response = await fetch(`/api/get-user-field-info?userID=${this.state.userID}&attribute=currentRoomOpen`)\r\n        console.log(response)\r\n        \r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const roomID = await response.text()\r\n        return roomID\r\n    }\r\n\r\n\r\n    async setRoomID(roomID) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/set-user-info', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({userID: this.state.userID, attribute: 'currentRoomOpen', value: roomID})\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    async getGroupNumber(userID) {\r\n        const response = await fetch(`/api/get-group-number?userID=${userID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const groupNumber = await response.text()\r\n        return groupNumber\r\n    }\r\n\r\n\r\n    async getLoggedInUsersNumber(userID) {\r\n        const response = await fetch(`/api/get-logged-in-users?userID=${userID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const loggedInUsers = await response.json()\r\n        return loggedInUsers.length\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.isLoggedIn)\r\n            return <Redirect to=\"/login\"/>\r\n\r\n        if (!this.state.stateLoaded)\r\n            return <Loading/>\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"left-container\">\r\n                    <Link to=\"/profile\" className=\"lc-links\">\r\n                        <div className=\"left-container-link\">\r\n                            Profile\r\n                        </div>\r\n                    </Link>\r\n\r\n                    <Link to=\"/groups\" className=\"lc-links\">\r\n                        <div className=\"left-container-link\">\r\n                            Groups\r\n                        </div>\r\n                    </Link>\r\n\r\n                    <Link to=\"/random-chat\" className=\"lc-links\">\r\n                        <div className=\"left-container-link\">\r\n                            Random Chat\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n\r\n                <div className=\"right-container\">\r\n                    <div className=\"main-menu-items-container\">\r\n                        <div className=\"group-number-container\">\r\n                            <div className=\"number-container\">\r\n                                {this.state.groupNumber}\r\n                            </div>\r\n\r\n                            <div className=\"label-container\">\r\n                                <strong>Groups</strong>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"users-online-container\">\r\n                            <div className=\"number-container\">\r\n                                {this.state.loggedInUsersNumber}\r\n                            </div>\r\n\r\n                            <div className=\"label-container\">\r\n                                <strong>Users Online</strong>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Home\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\users-online.js",["215"],"import React from \"react\"\r\nimport \"../../styles/users-online.css\"\r\n\r\n\r\nclass UsersOnline extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"users-online-container\">\r\n                <div id=\"users-online-container-header\">\r\n                    <div>\r\n                        <strong id=\"users-online-label\">Users online: {this.props.loggedInUsers.length}</strong>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"users-online-container-body\">\r\n                    {\r\n                        this.props.loggedInUsers.map((username, idx) => {\r\n                            if (username === this.props.user2username)\r\n                                return (<div key={idx} className=\"logged-in-user active\" onClick={() => this.props.openRoom(username)}>\r\n                                            {username}\r\n                                        </div>)\r\n\r\n                            return (<div key={idx} className=\"logged-in-user\" onClick={() => this.props.openRoom(username)}>\r\n                                        {username}\r\n                                    </div>)\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UsersOnline\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\error.js",["216"],"import React from \"react\"\r\nimport \"../../styles/error.css\"\r\n\r\n\r\nclass Error extends React.Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"error-container-div\">\r\n                <div className=\"dark-background\">\r\n                </div>\r\n\r\n                <div className=\"error-container\">\r\n                    <div className=\"ec-top\">\r\n                        <div className=\"ec-title\">\r\n                            <h3>Internal Error</h3>\r\n                        </div>\r\n\r\n                        <div className=\"ec-closer\">\r\n                            <button className=\"ec-close-container-btn\" type=\"button\" onClick={this.props.closeComponent}>&#10006;</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr/>\r\n\r\n                    <div className=\"ec-middle\">\r\n                        <p>An unexpected problem was encountered. Here are a few things you can try:</p>\r\n                        <p><span className=\"bullet-point-span\">&#8226;</span> Reload the page</p>\r\n                        <p><span className=\"bullet-point-span\">&#8226;</span> If you're logged into your account, try logging out and logging back in</p>\r\n                        <p><span className=\"bullet-point-span\">&#8226;</span> Wait and try again later</p>\r\n                    </div>\r\n\r\n                    <div className=\"ec-bottom\">\r\n                        <div className=\"ec-bottom-container\">\r\n                            <button className=\"ec-bottom-btn\" type=\"button\" onClick={this.props.closeComponent}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Error\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\random-room.js",["217","218","219","220","221","222","223"],"import React from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport MessageBox from './message-box'\r\nimport Loading from \"./loading\"\r\nimport Cookies from \"js-cookie\"\r\nimport \"../../styles/random-room.css\"\r\n\r\n\r\nclass RandomRoom extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            roomID: this.props.roomID,\r\n            roomName: this.props.roomName,\r\n            roomMessages: [],\r\n            messagesRetrieved: false,\r\n\r\n            user1ID: this.props.user1ID,\r\n            user1username: this.props.user1username,\r\n            user1avatarString: null,\r\n            user2ID: this.props.user2ID,\r\n            user2username: this.props.user2username,\r\n            user2avatarString: null\r\n        }\r\n\r\n        this.checkIfRoomExists = this.checkIfRoomExists.bind(this)\r\n        this.createRoom = this.createRoom.bind(this)\r\n        this.getDate = this.getDate.bind(this)\r\n        this.getTime = this.getTime.bind(this)\r\n        this.setRoomID = this.setRoomID.bind(this)\r\n        this.subscribeToRoom = this.subscribeToRoom.bind(this)\r\n        this.getRoomMessages = this.getRoomMessages.bind(this)\r\n        this.getAvatarString = this.getAvatarString.bind(this)\r\n        this.handleKeyPress = this.handleKeyPress.bind(this)\r\n        this.sendMessage = this.sendMessage.bind(this)\r\n        this.showLatestMessages = this.showLatestMessages.bind(this)\r\n        this.getUserInfo = this.getUserInfo.bind(this)\r\n        this.convertTime = this.convertTime.bind(this)\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        const roomExists = await this.checkIfRoomExists(this.state.roomID)\r\n\r\n        if (roomExists === \"ERROR-OCCURRED\") {\r\n            this.props.showError()\r\n            return\r\n        }\r\n\r\n        if (!roomExists) {\r\n            const roomCreated = await this.createRoom(this.state.roomID)\r\n\r\n            if (roomCreated === \"ERROR-OCCURRED\") {\r\n                this.props.showError()\r\n                return\r\n            }\r\n        }\r\n\r\n\r\n        const roomIdSet = await this.setRoomID(this.state.roomID)\r\n\r\n        if (roomIdSet === \"ERROR-OCCURRED\") {\r\n            this.props.showError()\r\n            return\r\n        }\r\n\r\n\r\n        this.subscribeToRoom(this.state.roomID)\r\n\r\n\r\n        const messages = await this.getRoomMessages(this.state.roomID)\r\n\r\n        if (messages === null) {\r\n            this.props.showError()\r\n            return\r\n        }\r\n\r\n\r\n        const avatarString1 = await this.getAvatarString(this.state.user1ID)\r\n\r\n        if (avatarString1 === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n\r\n        const avatarString2 = await this.getAvatarString(this.state.user2ID)\r\n\r\n        if (avatarString2 === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n\r\n        if (avatarString1 === null || avatarString2 === null) {\r\n            this.props.showError()\r\n            return\r\n        }\r\n\r\n        this.setState({\r\n            roomMessages: messages,\r\n            messagesRetrieved: true,\r\n            user1avatarString: avatarString1,\r\n            user2avatarString: avatarString2\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n        this.showLatestMessages()\r\n    }\r\n\r\n\r\n    async checkIfRoomExists(roomID) {\r\n        const response = await fetch(`/api/check-if-room-exists?roomID=${roomID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const roomExists = await response.json()\r\n\r\n        if (roomExists)\r\n            return true\r\n        return false\r\n    }\r\n\r\n\r\n    async createRoom(roomID) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch(\"/api/create-room\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"XSRF-Token\": token\r\n            },\r\n            body: JSON.stringify({\r\n                id: roomID,\r\n                groupID: \"null\",\r\n                name: \"null\", // this is bc for each user, the name of the room will be the other user's username\r\n                purpose: \"null\",\r\n                user1ID: this.state.user1ID,\r\n                user2ID: this.state.user2ID,\r\n                date: this.getDate(),\r\n                time: this.getTime(),\r\n                groupRoom: false\r\n            })\r\n        })\r\n\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    // Retrieves the current date.\r\n    getDate() {\r\n      const dateObj = new Date();\r\n\r\n      const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ];\r\n\r\n      return `${months[dateObj.getMonth()]} ${dateObj.getDate()}, ${dateObj.getFullYear()}`;\r\n    }\r\n\r\n\r\n    getTime() {\r\n        let dateObj = new Date()\r\n        return dateObj.getTime()\r\n    }\r\n\r\n\r\n    async setRoomID(roomID) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/set-user-info', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({\r\n                userID: this.props.user1ID,\r\n                attribute: 'currentRoomOpen',\r\n                value: roomID\r\n            })\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    subscribeToRoom(roomID) {\r\n        this.props.socket.emit('join-room', roomID)\r\n\r\n        // this is to receive messages from current room\r\n        this.props.socket.on(roomID, async data => {\r\n            let roomMessagesUpdated = this.state.roomMessages\r\n            roomMessagesUpdated.push(data)\r\n\r\n            if (data.senderID === \"N/A\" && data.message === \"THE OTHER USER HAS DISCONNECTED.\") {\r\n                this.props.socket.emit(\"leave-room\", this.state.roomID)\r\n\r\n                document.getElementById(\"message-input\").setAttribute(\"disabled\", \"disabled\")\r\n                document.getElementById(\"send-btn\").setAttribute(\"disabled\", \"disabled\")\r\n            }\r\n\r\n            this.setState({roomMessages: roomMessagesUpdated})\r\n        })\r\n    }\r\n\r\n\r\n    async getRoomMessages(roomID) {\r\n        const response = await fetch(`/api/get-room-messages?roomID=${roomID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const messages = await response.json()\r\n        return messages\r\n    }\r\n\r\n\r\n    async getAvatarString(userID) {\r\n        const response = await fetch(`/api/get-user-field-info?userID=${userID}&attribute=avatarString`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const avatarString = await response.text()\r\n        return avatarString\r\n    }\r\n\r\n\r\n    handleKeyPress(event) {\r\n        if (event.key === \"Enter\") {\r\n            event.preventDefault()\r\n            this.sendMessage()\r\n        }\r\n    }\r\n\r\n\r\n    async sendMessage() {\r\n        const message = document.getElementById(\"message-input\").value.trim()\r\n\r\n        if (message === \"\")\r\n            return\r\n\r\n        document.getElementById(\"message-input\").value = \"\"\r\n\r\n\r\n        // ***********************************************************************************************\r\n        // Send the message to the server, and then have the server paste the message in the room\r\n\r\n        const date = this.getDate()\r\n        const time = this.getTime()\r\n\r\n        this.props.socket.emit(\"send-message-to-random-room\", {\r\n            senderID: this.state.user1ID,\r\n            message: message,\r\n            roomID: this.state.roomID,\r\n            groupID: \"null\",\r\n            date: date,\r\n            time: time,\r\n            recipientID: this.state.user2ID,\r\n            username: this.state.user1username\r\n        })\r\n\r\n\r\n\r\n        const userInfo = await this.getUserInfo()\r\n\r\n        if (userInfo === \"ERROR-OCCURRED\") {\r\n            this.props.displayError()\r\n            return\r\n        }\r\n\r\n\r\n\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch(\"/api/save-message-to-db\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"XSRF-Token\": token\r\n            },\r\n            body: JSON.stringify({\r\n                id: uuidv4(),\r\n                senderID: this.props.user1ID,\r\n                username: userInfo.username,\r\n                message: message,\r\n                roomID: this.state.roomID,\r\n                groupID: \"null\",\r\n                date: date,\r\n                time: time\r\n            })\r\n        })\r\n\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.props.displayError()\r\n        }\r\n    }\r\n\r\n\r\n    showLatestMessages() {\r\n        const messagesContainer = document.getElementById(\"messages-container\")\r\n        messagesContainer.scrollTop = messagesContainer.scrollHeight\r\n    }\r\n\r\n\r\n    async getUserInfo() {\r\n        const response = await fetch(`/api/get-profile-info?userID=${this.props.user1ID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const userInfo = await response.json()\r\n        return userInfo\r\n    }\r\n\r\n\r\n    convertTime(epochTime) {\r\n        let currentDate = new Date(epochTime).toLocaleString()\r\n        currentDate = currentDate.split(\",\")\r\n\r\n        const seconds = currentDate[1].substring(currentDate[1].lastIndexOf(\":\"), currentDate[1].lastIndexOf(\":\") + 3)\r\n        const time = currentDate[1].replace(seconds, \"\")\r\n        return time\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"random-room-container\" key={this.props.childKey}>\r\n                <h3 id=\"random-chat-header\">\r\n                    Random Chat\r\n                </h3>\r\n\r\n                <div id=\"room-title\">\r\n                    {this.props.roomName}\r\n                </div>\r\n\r\n                <div id = \"messages-container\">\r\n                    { this.state.messagesRetrieved === true ?\r\n\r\n                        this.state.roomMessages.map(\r\n                            (item, idx) => {\r\n                                if (this.state.roomMessages[idx].senderID === \"N/A\")\r\n                                    return <MessageBox key={idx} message={item.message} senderID=\"N/A\"/>\r\n                                else if (idx >= 1 && this.state.roomMessages[idx-1].senderID === this.state.roomMessages[idx].senderID && this.state.roomMessages[idx-1].date === this.state.roomMessages[idx].date)\r\n                                    return <MessageBox key={idx} message={item.message} time={this.convertTime(item.time)}/>\r\n                                return <MessageBox key={idx} avatarString={item.avatarString} username={item.username} message={item.message} date={item.date} time={this.convertTime(item.time)}/>\r\n                            }\r\n                        )\r\n\r\n                        :\r\n\r\n                        <Loading/>\r\n                    }\r\n                </div>\r\n\r\n                <div id=\"bottom-container\">\r\n                    <form id=\"form\">\r\n                        <input id=\"message-input\" type=\"text\" placeholder=\"Type message\" autoComplete=\"off\" onKeyPress={this.handleKeyPress}/>\r\n\r\n                        <button id=\"send-btn\" type=\"button\" onClick={this.sendMessage}>\r\n                            SEND\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default RandomRoom\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\navbar.js",["224","225"],"import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport Cookies from 'js-cookie'\r\n\r\nimport logoIcon from \"../../images/logo.png\"\r\nimport notificationIcon from \"../../images/bell.png\"\r\nimport hamburgerIcon from \"../../images/hamburger.png\"\r\nimport closeIcon from \"../../images/close.png\"\r\nimport profile2Icon from \"../../images/profile-2.png\"\r\n\r\nimport \"../../styles/navbar.css\"\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nimport NotificationsBox from \"./notifications-box\"\r\nimport NavbarMenu from \"./navbar-menu\"\r\nimport Error from \"./error\"\r\n\r\n\r\nclass Navbar extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            showSidebar: false,\r\n            showNotificationsBox: false,\r\n            showNavbarMenuItems: false,\r\n            userID: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).userID,\r\n            displayError: false,\r\n            isLoggedIn: false,\r\n            timerID: null\r\n        }\r\n\r\n        this.logUserOut = this.logUserOut.bind(this)\r\n        this.toggleNotificationsBox = this.toggleNotificationsBox.bind(this)\r\n        this.showNavbarMenu = this.showNavbarMenu.bind(this)\r\n        this.goToPage = this.goToPage.bind(this)\r\n        this.logout = this.logout.bind(this)\r\n        this.openSidebar = this.openSidebar.bind(this)\r\n        this.close = this.close.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n        if (Cookies.get(\"jwtHP\") !== undefined && this.state.timerID === null) {\r\n            const timerID = setInterval(async () => {\r\n                if (Cookies.get(\"jwtHP\") === undefined) {\r\n                    clearInterval(timerID)\r\n                    return\r\n                }\r\n\r\n                const sessionExpirationTime = jwt_decode(Cookies.get(\"jwtHP\")).expirationTime\r\n                this.setState({timerID: timerID, isLoggedIn: true})\r\n\r\n\r\n                // Logging the user out early (60 seconds to be precise). This is because in order to log out a user, the /logout route\r\n                // needs to be called, and for it to be called and run successfully, the cookie can't have expired yet. Hence the reason why\r\n                // the user is logged out 1 min earlier before the cookie/session expires.\r\n                // - Also, the cookie/session is set to expire 1 hour and 1 min after the user logs in, so calling the /logout route 1 min early\r\n                //   just means that each user's session lasts an hour, so there's no harm done.\r\n                if (Math.ceil(Date.now()/1000) >= sessionExpirationTime - 60) {\r\n                    await this.logUserOut(timerID)\r\n                }\r\n            }, 1000)\r\n        }\r\n    }\r\n\r\n\r\n    async logUserOut(timerID) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch(\"/api/logout\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"XSRF-Token\": token\r\n            },\r\n            body: JSON.stringify({\r\n                userID: jwt_decode(Cookies.get(\"jwtHP\")).userID,\r\n                sessionEnded: true\r\n            })\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return\r\n        }\r\n\r\n\r\n        // deletes the cookies\r\n        document.cookie.split(\";\").forEach((c) => {\r\n            document.cookie = c\r\n            .replace(/^ +/, \"\")\r\n            .replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\")\r\n        })\r\n\r\n\r\n        if (timerID !== null) {\r\n            clearInterval(timerID)\r\n        }\r\n\r\n\r\n        this.setState({isLoggedIn: false})\r\n\r\n        this.props.history.push(\"/login\")\r\n    }\r\n\r\n\r\n    toggleNotificationsBox() {\r\n        this.setState({showNotificationsBox: !this.state.showNotificationsBox})\r\n    }\r\n\r\n\r\n    showNavbarMenu() {\r\n        this.setState({showNavbarMenuItems: true})\r\n    }\r\n\r\n\r\n    goToPage(route) {\r\n        this.close()\r\n        this.props.history.push(route)\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    async logout() {\r\n        this.close()\r\n\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch(\"/api/logout\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({\r\n                userID: jwt_decode(Cookies.get(\"jwtHP\")).userID,\r\n                sessionEnded: false\r\n            })\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return\r\n        }\r\n\r\n\r\n        // deletes the cookies\r\n        document.cookie.split(\";\").forEach((c) => {\r\n            document.cookie = c\r\n            .replace(/^ +/, \"\")\r\n            .replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\")\r\n        })\r\n\r\n\r\n        clearInterval(this.state.timerID)\r\n\r\n        this.props.history.push(\"/login\")\r\n    }\r\n\r\n\r\n    openSidebar() {\r\n        this.setState({showSidebar: true})\r\n        document.getElementById(\"sidebar\").style.width = \"75%\"\r\n    }\r\n\r\n\r\n    close() {\r\n        this.setState({showSidebar: false, showNotificationsBox: false, showNavbarMenuItems: false})\r\n        document.getElementById(\"sidebar\").style.width = \"0\"\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.timerID !== null && Cookies.get(\"jwtHP\") === undefined)\r\n            clearInterval(this.state.timerID)\r\n\r\n        if (Cookies.get(\"jwtHP\") === undefined)\r\n            return null\r\n\r\n        return (\r\n            <nav className=\"navbar-container\">\r\n                <div className=\"navbar\">\r\n                    <button className=\"nav-hamburger\" onClick={this.openSidebar}>\r\n                        <img className=\"nav-img\" src={hamburgerIcon} alt=\"Hamburger icon\"/>\r\n                    </button>\r\n\r\n                    <button className=\"nav-logo\" onClick={() => this.goToPage(\"/home\")}>\r\n                        <img className=\"nav-img\" src={logoIcon} alt=\"Logo icon\"/>\r\n                    </button>\r\n\r\n                    <button className=\"nav-item\" id=\"notifications-btn\" onClick={this.toggleNotificationsBox}>\r\n                        <img className=\"nav-img\" src={notificationIcon} alt=\"Notification icon\"/>\r\n                    </button>\r\n\r\n                    <button className=\"nav-item\" id=\"navbar-menu-btn\" onClick={this.showNavbarMenu}>\r\n                        <img className=\"nav-img\" src={profile2Icon} alt=\"Profile icon\"/>\r\n                    </button>\r\n                </div>\r\n\r\n\r\n                {\r\n                    (this.state.showSidebar || this.state.showNotificationsBox || this.state.showNavbarMenuItems) &&\r\n\r\n                    <div className=\"dark-background\" onClick={this.close}>\r\n                    </div>\r\n                }\r\n\r\n\r\n                <div id=\"sidebar\">\r\n                    <div className=\"sidebar-header\">\r\n                        <button className=\"nav-close\" onClick={this.close}>\r\n                            <img className=\"nav-img\" src={closeIcon} alt=\"Close icon\"/>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"sidebar-body\">\r\n                        <Link to=\"/home\" onClick={this.close} style={{color: \"black\", textDecoration: \"none\"}}>\r\n                            <div className=\"sidebar-link\">\r\n                                Home\r\n                            </div>\r\n                        </Link>\r\n\r\n                        <Link to=\"/profile\" onClick={this.close} style={{color: \"black\", textDecoration: \"none\"}}>\r\n                            <div className=\"sidebar-link\">\r\n                                Profile\r\n                            </div>\r\n                        </Link>\r\n\r\n                        <Link to=\"/groups\" onClick={this.close} style={{color: \"black\", textDecoration: \"none\"}}>\r\n                            <div className=\"sidebar-link\">\r\n                                Groups\r\n                            </div>\r\n                        </Link>\r\n\r\n                        <Link to=\"/random-chat\" onClick={this.close} style={{color: \"black\", textDecoration: \"none\"}}>\r\n                            <div className=\"sidebar-link\">\r\n                                Random Chat\r\n                            </div>\r\n                        </Link>\r\n\r\n                        <button className=\"border-0\" onClick={this.logout} style={{backgroundColor: \"green\", width: \"100%\", padding: \"0\"}}>\r\n                            <div className=\"sidebar-link\" style={{textAlign: \"left\", width: \"100%\"}}>\r\n                                Logout\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    this.state.showNotificationsBox &&\r\n\r\n                    <NotificationsBox userID={this.state.userID} closeComponent={this.toggleNotificationsBox}/>\r\n                }\r\n\r\n\r\n                {\r\n                    this.state.showNavbarMenuItems &&\r\n\r\n                    <NavbarMenu close={this.close} logout={this.logout}/>\r\n                }\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent}/>}\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Navbar\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\group-room.js",["226","227","228","229"],"import React from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport MessageBox from './message-box'\r\nimport Loading from \"./loading\"\r\nimport Cookies from \"js-cookie\"\r\nimport \"../../styles/group-room.css\"\r\n\r\n\r\nclass GroupRoom extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            roomMessages: [],\r\n            stateLoaded: false\r\n        }\r\n\r\n        this.getRoomMessages = this.getRoomMessages.bind(this)\r\n        this.subscribeToRoom = this.subscribeToRoom.bind(this)\r\n        this.sendMessage = this.sendMessage.bind(this)\r\n        this.getDate = this.getDate.bind(this)\r\n        this.getTime = this.getTime.bind(this)\r\n        this.getUserInfo = this.getUserInfo.bind(this)\r\n        this.convertTime = this.convertTime.bind(this)\r\n        this.handleKeyPress = this.handleKeyPress.bind(this)\r\n        this.showLatestMessages = this.showLatestMessages.bind(this)\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        // 1. Get the messages for this room\r\n        const messages = await this.getRoomMessages(this.props.roomID)\r\n\r\n        // error occurred\r\n        if (messages === \"ERROR-OCCURRED\") {\r\n            this.props.displayError()\r\n            return\r\n        }\r\n\r\n        this.subscribeToRoom(this.props.roomID)\r\n\r\n        this.setState({roomMessages: messages, stateLoaded: true})\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n        const messagesContainer = document.getElementById(\"grc-messages-container\")\r\n        this.showLatestMessages()\r\n    }\r\n\r\n\r\n    async getRoomMessages(roomID) {\r\n        const response = await fetch(`/api/get-room-messages?roomID=${this.props.roomID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const messages = await response.json()\r\n        return messages\r\n    }\r\n\r\n\r\n    subscribeToRoom(roomID) {\r\n        this.props.socket.emit(\"join-room\", roomID)\r\n\r\n        // Every time a message gets posted in the room that we're subscribed in, the function below will get executed.\r\n        this.props.socket.on(roomID, async data => {\r\n            let roomMessagesUpdated = this.state.roomMessages\r\n            roomMessagesUpdated.push(data)\r\n\r\n            this.setState({roomMessages: roomMessagesUpdated})\r\n        })\r\n    }\r\n\r\n\r\n    async sendMessage() {\r\n        const message = document.getElementById(\"grc-message-input\").value.trim()\r\n        if (message === \"\")\r\n            return\r\n\r\n        document.getElementById(\"grc-message-input\").value = \"\"\r\n\r\n\r\n        // ***********************************************************************************************\r\n        // Send the message to the server, and then have the server paste the message in the room\r\n\r\n        const date = this.getDate()\r\n        const time = this.getTime()\r\n\r\n        this.props.socket.emit(\"send-message-to-group-room\", {\r\n            senderID: this.props.userID,\r\n            message: message,\r\n            roomID: this.props.roomID,\r\n            roomName: this.props.roomName,\r\n            groupID: this.props.groupID,\r\n            groupName: this.props.groupName,\r\n            date: date,\r\n            time: time\r\n        })\r\n\r\n\r\n\r\n        const userInfo = await this.getUserInfo()\r\n\r\n        if (userInfo === \"ERROR-OCCURRED\") {\r\n            this.props.displayError()\r\n            return\r\n        }\r\n\r\n\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch(\"/api/save-message-to-db\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"XSRF-Token\": token\r\n            },\r\n            body: JSON.stringify({\r\n                id: uuidv4(),\r\n                senderID: this.props.userID,\r\n                username: userInfo.username,\r\n                message: message,\r\n                roomID: this.props.roomID,\r\n                groupID: this.props.groupID,\r\n                date: date,\r\n                time: time\r\n            })\r\n        })\r\n\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    getDate() {\r\n      const dateObj = new Date();\r\n\r\n      const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ];\r\n\r\n      return `${months[dateObj.getMonth()]} ${dateObj.getDate()}, ${dateObj.getFullYear()}`;\r\n    }\r\n\r\n\r\n    getTime() {\r\n        const today = new Date()\r\n        return today.getTime()\r\n    }\r\n\r\n\r\n    convertTime(epochTime) {\r\n        let currentDate = new Date(epochTime).toLocaleString()\r\n        currentDate = currentDate.split(\",\")\r\n\r\n        const seconds = currentDate[1].substring(currentDate[1].lastIndexOf(\":\"), currentDate[1].lastIndexOf(\":\") + 3)\r\n        const time = currentDate[1].replace(seconds, \"\")\r\n        return time\r\n    }\r\n\r\n\r\n    async getUserInfo() {\r\n        const response = await fetch(`/api/get-profile-info?userID=${this.props.userID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const userInfo = await response.json()\r\n        return userInfo\r\n    }\r\n\r\n\r\n    handleKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault()\r\n            this.sendMessage()\r\n        }\r\n    }\r\n\r\n\r\n    showLatestMessages() {\r\n        // The purpose of the two lines below is to make sure that when a new message is displayed, the scrollbar is\r\n        // automatically scrolled all the way to the bottom\r\n        const messagesContainer = document.getElementById(\"grc-messages-container\")\r\n        messagesContainer.scrollTop = messagesContainer.scrollHeight\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"group-room-container\">\r\n                <h3 className=\"group-chat-header\">\r\n                    Group Chat\r\n                </h3>\r\n\r\n                <div className=\"grc-title\">\r\n                    {this.props.roomName}\r\n                </div>\r\n\r\n                <div id=\"grc-messages-container\">\r\n                    { this.state.stateLoaded ?\r\n\r\n                        this.state.roomMessages.map(\r\n                            (item, idx) => {\r\n                                if (idx >= 1 && this.state.roomMessages[idx-1].senderID === this.state.roomMessages[idx].senderID && this.state.roomMessages[idx-1].date === this.state.roomMessages[idx].date)\r\n                                    return <MessageBox key={idx} message={item.message} time={this.convertTime(item.time)}/>\r\n                                return <MessageBox key={idx} avatarString={item.avatarString} username={item.username} message={item.message} date={item.date} time={this.convertTime(item.time)}/>\r\n                            }\r\n                        )\r\n\r\n                        :\r\n\r\n                        <Loading/>\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"grc-bottom-container\">\r\n                    <form className=\"grc-bottom-container-form\">\r\n                        <input id=\"grc-message-input\" type=\"text\" placeholder=\"Type message\" autoComplete=\"off\" onKeyPress={this.handleKeyPress}/>\r\n\r\n                        <button id=\"grc-send-msg-btn\" type=\"button\" onClick={this.sendMessage}>\r\n                            SEND\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GroupRoom\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\profile.js",["230","231","232","233"],"import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport ModifyProfileInfo from './modify-profile-info'\r\nimport DeleteAccount from './delete-account'\r\nimport Error from './error'\r\nimport Loading from \"./loading\"\r\nimport \"../../styles/profile.css\"\r\n\r\nimport jwt_decode from 'jwt-decode'\r\nimport Cookies from 'js-cookie'\r\nimport { generateFromString } from 'generate-avatar'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\n\r\nclass Profile extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            userID: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).userID,\r\n            username: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).username,\r\n            profileInfo: null,\r\n\r\n            showModificationComponent: false,\r\n            showDeleteAccountComponent: false,\r\n            infoToChange: null,\r\n\r\n            stateLoaded: false,\r\n            displayError: false\r\n        }\r\n\r\n        this.getRoomID = this.getRoomID.bind(this)\r\n        this.setRoomID = this.setRoomID.bind(this)\r\n        this.getProfileInfo = this.getProfileInfo.bind(this)\r\n        this.changeAvatar = this.changeAvatar.bind(this)\r\n        this.toggleComponent = this.toggleComponent.bind(this)\r\n        this.updateInfo = this.updateInfo.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (Cookies.get(\"jwtHP\") === undefined) {\r\n            this.setState({isLoggedIn: false})\r\n            return\r\n        }\r\n\r\n\r\n\r\n        let currentRoomOpen = await this.getRoomID()\r\n\r\n        if (currentRoomOpen === \"ERROR-OCCURRED\") {\r\n            this.setState({stateLoaded: true})\r\n            return\r\n        }\r\n\r\n        if (currentRoomOpen !== \"\") {\r\n            const status = await this.setRoomID(null)\r\n\r\n            if (status === \"ERROR-OCCURRED\") {\r\n                this.setState({stateLoaded: true})\r\n                return\r\n            }\r\n        }\r\n\r\n\r\n        const profileInfo = await this.getProfileInfo(this.state.userID)\r\n\r\n        if (profileInfo === \"ERROR-OCCURRED\") {\r\n            this.setState({stateLoaded: true})\r\n            return\r\n        }\r\n\r\n\r\n        this.setState({profileInfo: profileInfo, stateLoaded: true})\r\n    }\r\n\r\n\r\n    async getRoomID() {\r\n        let response = await fetch(`/api/get-user-field-info?userID=${this.state.userID}&attribute=currentRoomOpen`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const roomID = await response.text()\r\n        return roomID\r\n    }\r\n\r\n\r\n    async setRoomID(roomID) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/set-user-info', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({userID: this.state.userID, attribute: 'currentRoomOpen', value: roomID})\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    async getProfileInfo(userID) {\r\n        const response = await fetch(`/api/get-profile-info?userID=${userID}`)\r\n        const profileInfo = await response.json()\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return profileInfo\r\n    }\r\n\r\n\r\n    async changeAvatar() {\r\n        const newAvatarString = uuidv4()\r\n\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/set-user-info', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({userID: this.state.userID, attribute: 'avatarString', value: newAvatarString})\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return\r\n        }\r\n\r\n\r\n        let modifiedProfileInfo = this.state.profileInfo\r\n        modifiedProfileInfo.avatarString = newAvatarString\r\n        this.setState({profileInfo: modifiedProfileInfo})\r\n    }\r\n\r\n\r\n    toggleComponent(component) {\r\n        if (component === 'ModifyProfileInfo')\r\n            this.setState({showModificationComponent: !this.state.showModificationComponent})\r\n        else\r\n            this.setState({showDeleteAccountComponent: !this.state.showDeleteAccountComponent})\r\n    }\r\n\r\n\r\n    updateInfo(attribute, value) {\r\n        let newProfileInfo = this.state.profileInfo\r\n        newProfileInfo[attribute] = value\r\n\r\n        this.setState({profileInfo: newProfileInfo})\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.isLoggedIn)\r\n            return <Redirect to=\"/login\"/>\r\n\r\n        if (!this.state.stateLoaded)\r\n            return <Loading/>\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"left-container\">\r\n                    <h1>Profile</h1>\r\n                </div>\r\n\r\n                <div className=\"right-container\">\r\n                    <h3 id=\"profile-header\">\r\n                        Profile\r\n                    </h3>\r\n\r\n                    <div className=\"user-info-container\">\r\n                        <div className=\"user-info-top\">\r\n                            <div>\r\n                                <div id=\"avatar-div\">\r\n                                    <img id=\"avatar-img\" src={`data:image/svg+xml;utf8,${this.state.profileInfo && generateFromString(this.state.profileInfo.avatarString)}`} alt=\"user profile avatar\"/>\r\n                                </div>\r\n\r\n                                <div id=\"username-and-userid\">\r\n                                    <h4>{this.state.username}</h4>\r\n                                    <p>{this.state.userID}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div id=\"change-avatar-container\">\r\n                                <button id=\"change-avatar-btn\" onClick={this.changeAvatar}>CHANGE AVATAR</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"user-info-bottom\">\r\n                            <ModifyProfileInfo userID={this.state.userID} email={this.state.profileInfo && this.state.profileInfo.email} attribute=\"name\" value={this.state.profileInfo && this.state.profileInfo.name} updateInfo={this.updateInfo} displayError={this.toggleErrorComponent}/>\r\n                            <ModifyProfileInfo id=\"password-change-container\" userID={this.state.userID} email={this.state.profileInfo && this.state.profileInfo.email} attribute=\"password\" value=\"**********\" updateInfo={this.updateInfo} displayError={this.toggleErrorComponent}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <br/>\r\n                    <hr id=\"line-separator\"/>\r\n                    <br/>\r\n\r\n                    <div id=\"delete-account-container\">\r\n                        <h3>ACCOUT REMOVAL</h3>\r\n\r\n                        <div>\r\n                            <p>Performing this action will permanently delete your account.</p>\r\n                            <button type=\"button\" onClick={() => this.toggleComponent(\"DeleteAccount\")}>Delete Account</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {this.state.showDeleteAccountComponent && <DeleteAccount userID={this.state.profileInfo.id} email={this.state.profileInfo && this.state.profileInfo.email} closeComponent={this.toggleComponent} history={this.props.history} displayError={this.toggleErrorComponent}/>}\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Profile\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\random-chat.js",["234","235","236","237","238","239"],"import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nimport Cookies from 'js-cookie'\r\nimport UsersOnline from './users-online'\r\nimport RandomRoom from './random-room'\r\nimport Loading from \"./loading\"\r\nimport Error from './error'\r\n\r\nimport jwt_decode from 'jwt-decode'\r\nimport io from \"socket.io-client\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport \"../../styles/random-chat.css\"\r\n\r\n\r\nclass RandomChat extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            user1ID: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).userID,\r\n            user1username: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).username,\r\n            user2ID: null,\r\n            user2username: null,\r\n            loggedInUsers: null,\r\n\r\n            currentRoomID: null,\r\n            currentRoomName: null,\r\n            openRoom: false,\r\n            dataFetched: false,\r\n\r\n            displayError: false,\r\n            socket: io(''),\r\n            stateLoaded: false,\r\n            childKey: null // makes it so that when <RandomRoom/> component gets new props, it re-renders\r\n        }\r\n\r\n        this.getLoggedInUsers = this.getLoggedInUsers.bind(this)\r\n        this.setStateValues = this.setStateValues.bind(this)\r\n        this.setRoomID = this.setRoomID.bind(this)\r\n        this.getRoomID = this.getRoomID.bind(this)\r\n        this.isRandomRoom = this.isRandomRoom.bind(this)\r\n        this.getUser2Data = this.getUser2Data.bind(this)\r\n        this.openRoom = this.openRoom.bind(this)\r\n        this.getUserID = this.getUserID.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (Cookies.get('jwtHP') === undefined) {\r\n            this.setState({isLoggedIn: false})\r\n            return\r\n        }\r\n\r\n\r\n        const loggedInUsers = await this.getLoggedInUsers()\r\n\r\n        if (loggedInUsers === \"ERROR-OCCURRED\") {\r\n            this.setState({stateLoaded: true})\r\n            return\r\n        }\r\n\r\n        this.setStateValues(loggedInUsers)\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.currentRoomID !== null) {\r\n            this.state.socket.emit('leave-room', this.state.currentRoomID)\r\n            this.setRoomID(null)\r\n        }\r\n    }\r\n\r\n\r\n    async getLoggedInUsers() {\r\n        let response = await fetch(`/api/get-logged-in-users?userID=${this.state.user1ID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n\r\n        const users = await response.json()\r\n        return users\r\n    }\r\n\r\n\r\n    async setStateValues(loggedInUsers) {\r\n        if (this.props.location.state !== undefined) {\r\n            const status = await this.setRoomID(this.props.location.state.roomID)\r\n\r\n            if (status === \"ERROR-OCCURRED\")\r\n                return\r\n\r\n            this.setState({\r\n                user2ID: this.props.location.state.user2,\r\n                user2username: this.props.location.state.roomName,\r\n                loggedInUsers: loggedInUsers,\r\n\r\n                currentRoomID: this.props.location.state.roomID,\r\n                currentRoomName: this.props.location.state.roomName,\r\n                openRoom: true,\r\n                dataFetched: true,\r\n                stateLoaded: true,\r\n\r\n                childKey: uuidv4()\r\n            })\r\n\r\n            return\r\n        }\r\n\r\n\r\n\r\n        let roomID = await this.getRoomID()\r\n\r\n        if (roomID === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n\r\n        const idBelongsToRandomRoom = await this.isRandomRoom(roomID)\r\n\r\n        if (roomID === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n\r\n        if (roomID === null || !idBelongsToRandomRoom) {\r\n            const status = await this.setRoomID(null)\r\n\r\n            if (status === \"ERROR-OCCURRED\")\r\n                return\r\n\r\n\r\n            this.setState({\r\n                user2ID: null,\r\n                user2username: null,\r\n                loggedInUsers: loggedInUsers,\r\n\r\n                currentRoomID: null,\r\n                currentRoomName: null,\r\n                openRoom: false,\r\n                dataFetched: true,\r\n                stateLoaded: true,\r\n\r\n                childKey: uuidv4()\r\n            })\r\n        }\r\n        else {\r\n            const user2Data = await this.getUser2Data(roomID)\r\n\r\n            if (user2Data === \"ERROR-OCCURRED\")\r\n                return\r\n\r\n            this.setState({\r\n                user2ID: user2Data.id,\r\n                user2username: user2Data.username,\r\n                loggedInUsers: loggedInUsers,\r\n\r\n                currentRoomID: roomID,\r\n                currentRoomName: user2Data.username,\r\n                openRoom: true,\r\n                dataFetched: true,\r\n                stateLoaded: true,\r\n\r\n                childKey: uuidv4()\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    async setRoomID(roomID) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/set-user-info', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({\r\n                userID: this.state.user1ID,\r\n                attribute: 'currentRoomOpen',\r\n                value: roomID\r\n            })\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    async getRoomID() {\r\n        let response = await fetch(`/api/get-user-field-info?userID=${this.state.user1ID}&attribute=currentRoomOpen`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const roomID = await response.text()\r\n\r\n        if (roomID === \"\")\r\n            return null\r\n        return roomID\r\n    }\r\n\r\n\r\n    async isRandomRoom(roomID) {\r\n        const response = await fetch(`/api/is-random-room?roomID=${roomID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const isRandomRoom = await response.json()\r\n        return isRandomRoom\r\n    }\r\n\r\n\r\n    async getUser2Data(roomID) {\r\n        const response = await fetch(`/api/get-user2-data?user1ID=${this.state.user1ID}&roomID=${roomID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const user2Data = await response.json()\r\n        return user2Data\r\n    }\r\n\r\n\r\n    async openRoom(user2username) {\r\n        if (user2username === this.state.user2username)\r\n            return\r\n\r\n        const loggedInUsersDivs = document.getElementsByClassName(\"logged-in-user\")\r\n\r\n        for (let i = 0; i < loggedInUsersDivs.length; i++) {\r\n            if (loggedInUsersDivs[i].innerText === user2username)\r\n                loggedInUsersDivs[i].classList.add(\"active\")\r\n            else\r\n                loggedInUsersDivs[i].classList.remove(\"active\")\r\n        }\r\n\r\n\r\n        if (this.state.currentRoomID !== null)\r\n            this.state.socket.emit('leave-room', this.state.currentRoomID)\r\n\r\n\r\n\r\n        const user2ID = await this.getUserID(user2username)\r\n\r\n        if (user2ID === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n\r\n        const ids = [this.state.user1ID, user2ID].sort()\r\n        const newRoomID = ids[0] + ids[1]\r\n\r\n        const status = await this.setRoomID(newRoomID)\r\n\r\n        if (status === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n\r\n        this.setState({\r\n            user2ID: user2ID,\r\n            user2username: user2username,\r\n\r\n            currentRoomID: newRoomID,\r\n            currentRoomName: user2username,\r\n            openRoom: true,\r\n\r\n            childKey: uuidv4()\r\n        })\r\n    }\r\n\r\n\r\n    async getUserID(username) {\r\n        const response = await fetch(`/api/get-user-id?username=${username}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const id = await response.text()\r\n        return id\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.isLoggedIn)\r\n            return <Redirect to=\"/login\"/>\r\n\r\n        if (!this.state.stateLoaded)\r\n            return <Loading/>\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"left-container\">\r\n                    <div className=\"lc-outer-container\">\r\n                        <div className=\"lc-inner-container\">\r\n                            <h1>Random Chat</h1>\r\n\r\n                            {\r\n                                this.state.loggedInUsers &&\r\n                                <UsersOnline loggedInUsers={this.state.loggedInUsers} user2username={this.state.user2username} openRoom={this.openRoom}/>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"right-container\">\r\n                    {\r\n                        this.state.dataFetched && (\r\n\r\n                            this.state.openRoom ?\r\n\r\n                            <RandomRoom key={this.state.childKey} socket={this.state.socket} roomID={this.state.currentRoomID} roomName={this.state.currentRoomName} user1ID={this.state.user1ID} user1username={this.state.user1username} user2ID={this.state.user2ID} user2username={this.state.user2username} showError={this.toggleErrorComponent}/>\r\n\r\n                            :\r\n\r\n                            <div>\r\n                                <div id=\"random-chat-message\">\r\n                                    <p>\r\n                                        <span className=\"bullet-point-span\">&#8226;</span> In this mode, you can start a conversation with any other user that's online by clicking on their username.\r\n                                    </p>\r\n                                    <p>\r\n                                        <span className=\"bullet-point-span\">&#8226;</span> When you click on a user, you create a room where both of you are the only members.\r\n                                    </p>\r\n                                    <p>\r\n                                        <span className=\"bullet-point-span\">&#8226;</span> <strong>WARNING:</strong> If at any point you log out (or your session ends), all your conversations in this mode will immediately be deleted.\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <UsersOnline loggedInUsers={this.state.loggedInUsers} user2username={this.state.user2username} openRoom={this.openRoom}/>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default RandomChat\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\become-admin.js",["240"],"import React from \"react\"\r\nimport \"../../styles/become-admin.css\"\r\nimport Error from \"./error\"\r\nimport Cookies from \"js-cookie\"\r\n\r\n\r\nclass BecomeAdmin extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            displayError: false\r\n        }\r\n\r\n        this.becomeAdmin = this.becomeAdmin.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async becomeAdmin() {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch(\"/api/become-admin\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"XSRF-Token\": token\r\n            },\r\n            body: JSON.stringify({groupID: this.props.groupID, userID: this.props.userID})\r\n        })\r\n\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return\r\n        }\r\n\r\n        const status = await response.text()\r\n        this.props.updateGroupAdmin(status, this.props.userID)\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* The purpose of the div immediately below is to provide a slightly dark background for when this component becomes visible */}\r\n                <div className=\"dark-background\" onClick={this.props.closeComponent}>\r\n                </div>\r\n\r\n                <form className=\"become-admin-form\">\r\n                    <div className=\"ba-form-top\">\r\n                        <div className=\"ba-form-title\">\r\n                            <h2>Become admin</h2>\r\n                        </div>\r\n\r\n                        <div className=\"ba-form-closer\">\r\n                            <button className=\"ba-close-form-btn\" type=\"button\" onClick={this.props.closeComponent}>&#10006;</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr/>\r\n\r\n                    <div className=\"ba-form-middle\">\r\n                        <p>By being the admin of the group, you make sure that everything runs well and everyone behaves in a respectful manner.</p>\r\n                    </div>\r\n\r\n                    <div className=\"ba-form-bottom\">\r\n                        <div className=\"ba-form-bottom-container\">\r\n                            <button className=\"ba-form-bottom-btn ba-btn-1\" type=\"button\" onClick={this.props.closeComponent}>Cancel</button>\r\n                            <button className=\"ba-form-bottom-btn ba-btn-2\" type=\"button\" onClick={this.becomeAdmin}>Confirm</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default BecomeAdmin\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\delete-account.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\group.js",["241","242","243","244","245","246","247"],"import React from \"react\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nimport GroupRoom from \"./group-room\"\r\nimport BecomeAdmin from \"./become-admin\"\r\n\r\nimport CreateRoom from \"./create-room\"\r\nimport InviteUser from \"./invite-user\"\r\nimport InvitationSent from \"./invitation-sent\"\r\nimport LeaveGroup from \"./leave-group\"\r\nimport PageNotFound from \"../page-not-found\"\r\nimport AccessGroupDenied from \"./access-group-denied\"\r\nimport GroupInvitationReceived from \"./group-invitation-received\"\r\nimport Loading from \"./loading\"\r\nimport Error from \"./error\"\r\n\r\nimport \"../../styles/group.css\"\r\nimport io from \"socket.io-client\"\r\nimport jwt_decode from \"jwt-decode\"\r\nimport Cookies from \"js-cookie\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\n\r\nclass Group extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            socket: io(''),\r\n            isLoggedIn: true,\r\n            userID: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).userID,\r\n\r\n            groupName: null,\r\n            groupID: null,\r\n            groupMembers: null,\r\n            groupRooms: [],\r\n            groupAdmin: null,\r\n            currentRoomName: null,\r\n            currentRoomID: null,\r\n\r\n            showGroup: true,\r\n            roomFound: true,\r\n\r\n            showCreateRoomComponent: false,\r\n            showBecomeAdminComponent: false,\r\n            showInviteUserComponent: false,\r\n            showInvitationSentComponent: false,\r\n            showLeaveGroupComponent: false,\r\n            showUserReceivedGroupInvitation: false,\r\n\r\n            userInvited: null,\r\n            displayError: false,\r\n            stateLoaded: false,\r\n\r\n            // Makes it so that when the <GroupRoom/> component gets new props, it gets destroyed and gets recreated\r\n            childKey: uuidv4()\r\n        }\r\n\r\n\r\n        this.userReceivedGroupInvitation = this.userReceivedGroupInvitation.bind(this)\r\n        this.userIsGroupMember = this.userIsGroupMember.bind(this)\r\n        this.getGroupInfo = this.getGroupInfo.bind(this)\r\n        this.getGroupMembers = this.getGroupMembers.bind(this)\r\n        this.getGroupRooms = this.getGroupRooms.bind(this)\r\n        this.setRoomID = this.setRoomID.bind(this)\r\n        this.openRoom = this.openRoom.bind(this)\r\n        this.toggleCreateRoomComponent = this.toggleCreateRoomComponent.bind(this)\r\n        this.toggleBecomeAdminComponent = this.toggleBecomeAdminComponent.bind(this)\r\n        this.toggleInviteUserComponent = this.toggleInviteUserComponent.bind(this)\r\n        this.toggleLeaveGroupComponent = this.toggleLeaveGroupComponent.bind(this)\r\n        this.closeGIRcomponent = this.closeGIRcomponent.bind(this)\r\n        this.invitationSent = this.invitationSent.bind(this)\r\n        this.toggleInvitationSentComponent = this.toggleInvitationSentComponent.bind(this)\r\n        this.updateGroupAdmin = this.updateGroupAdmin.bind(this)\r\n        this.goToNewRoom = this.goToNewRoom.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    // 1. Make a fetch request to get the current group room opened\r\n    //    i. On the server:\r\n    //      - if value is null, save main into the DB and return it\r\n    //      - else, return the value\r\n    // 2. Set the value returned into this.currentRoomOpen\r\n\r\n    async componentDidMount() {\r\n        if (Cookies.get(\"jwtHP\") === undefined) {\r\n            this.setState({isLoggedIn: false})\r\n            return\r\n        }\r\n\r\n\r\n        let groupID = null\r\n        let currentRoomName = null\r\n        let userReceivedGroupInvitation = false\r\n\r\n        // This is for when we navigate to this component using the address bar\r\n        if (this.props.location.state === undefined) {\r\n            let urlData = this.props.location.pathname.substring(this.props.location.pathname.indexOf(\"/group\") + 7)\r\n            urlData = urlData.split(\"/\")\r\n\r\n            groupID = urlData[0]\r\n            currentRoomName = urlData[1]\r\n\r\n\r\n            userReceivedGroupInvitation = await this.userReceivedGroupInvitation(groupID)\r\n\r\n            // an error occurred\r\n            if (userReceivedGroupInvitation === undefined)\r\n                return\r\n\r\n            if (!userReceivedGroupInvitation) {\r\n                const userIsMember = await this.userIsGroupMember(this.state.userID, groupID)\r\n\r\n                // an error occurred\r\n                if (userIsMember === undefined)\r\n                    return\r\n\r\n                if (!userIsMember) {\r\n                    this.setState({showGroup: false})\r\n                    return\r\n                }\r\n            }\r\n        }\r\n        // This is for when we navigate to this component using a link\r\n        else {\r\n            groupID = this.props.location.state.groupID\r\n            currentRoomName = this.props.location.state.currentRoomName\r\n\r\n            userReceivedGroupInvitation = await this.userReceivedGroupInvitation(groupID)\r\n\r\n            // an error occurred\r\n            if (userReceivedGroupInvitation === undefined)\r\n                return\r\n        }\r\n\r\n\r\n\r\n        const group = await this.getGroupInfo(groupID)\r\n\r\n        // an error occurred\r\n        if (group === undefined)\r\n            return\r\n\r\n\r\n        const groupAdmin = group.admin\r\n        const groupMembers = await this.getGroupMembers(groupID)\r\n\r\n        // an error occurred\r\n        if (groupMembers === undefined)\r\n            return\r\n\r\n\r\n        const groupRooms = await this.getGroupRooms(groupID)\r\n\r\n        // an error occurred\r\n        if (groupRooms === undefined)\r\n            return\r\n\r\n\r\n        let currentRoomID = null\r\n\r\n        for (let i = 0; i < groupRooms.length; i++) {\r\n            if (groupRooms[i].name === currentRoomName) {\r\n                currentRoomID = groupRooms[i].id\r\n                break\r\n            }\r\n        }\r\n\r\n        if (currentRoomID === null) {\r\n            this.setState({roomFound: false})\r\n            return\r\n        }\r\n\r\n\r\n        const status = await this.setRoomID(currentRoomID)\r\n\r\n        if (status === undefined)\r\n            return\r\n\r\n        this.setState({\r\n            groupName: group.name,\r\n            groupID: groupID,\r\n            groupMembers: groupMembers,\r\n            groupRooms: groupRooms,\r\n            groupAdmin: groupAdmin,\r\n            currentRoomName: currentRoomName,\r\n            currentRoomID: currentRoomID,\r\n            showUserReceivedGroupInvitation: userReceivedGroupInvitation,\r\n            stateLoaded: true,\r\n            childKey: uuidv4()\r\n        })\r\n    }\r\n\r\n\r\n    async componentWillUnmount() {\r\n        await this.setRoomID(null)\r\n\r\n        if (this.state.currentRoomID !== null)\r\n            this.state.socket.emit('leave-room', this.state.currentRoomID)\r\n    }\r\n\r\n\r\n    async componentDidUpdate() {\r\n        const urlRoomName = window.location.href.substring(window.location.href.lastIndexOf('/') + 1)\r\n\r\n        if (urlRoomName !== this.state.currentRoomName) {\r\n            const groupRooms = await this.getGroupRooms(this.state.groupID)\r\n\r\n            // an error occurred\r\n            if (groupRooms === undefined)\r\n                return\r\n\r\n\r\n            let newRoomID = null\r\n\r\n            for (let i = 0; i < groupRooms.length; i++) {\r\n                if (groupRooms[i].name === urlRoomName) {\r\n                    newRoomID = groupRooms[i].id\r\n                    break\r\n                }\r\n            }\r\n\r\n\r\n            this.setRoomID(newRoomID)\r\n\r\n            this.setState({\r\n                showCreateRoomComponent: false,\r\n                currentRoomName: urlRoomName,\r\n                currentRoomID: newRoomID,\r\n                groupRooms: groupRooms,\r\n                childKey: uuidv4()\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    async userReceivedGroupInvitation(groupID) {\r\n        const response = await fetch(`/api/did-user-receive-invite?userID=${this.state.userID}&groupID=${groupID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true, stateLoaded: true})\r\n            return undefined\r\n        }\r\n\r\n        const userReceivedGroupInvitation = await response.json()\r\n        return userReceivedGroupInvitation\r\n    }\r\n\r\n\r\n    async userIsGroupMember(userID, groupID) {\r\n        const response = await fetch(`/api/is-user-group-member?userID=${userID}&groupID=${groupID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true, stateLoaded: true})\r\n            return undefined\r\n        }\r\n\r\n        const userIsMember = await response.json()\r\n        return userIsMember\r\n    }\r\n\r\n\r\n    async getGroupInfo(groupID) {\r\n        let response = await fetch(`/api/get-group?groupID=${groupID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true, stateLoaded: true})\r\n            return undefined\r\n        }\r\n\r\n        const groupInfo = await response.json()\r\n        return groupInfo\r\n    }\r\n\r\n\r\n    async getGroupMembers(groupID) {\r\n        const response = await fetch(`/api/get-group-members?groupID=${groupID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true, stateLoaded: true})\r\n            return undefined\r\n        }\r\n\r\n        const memberUsernames = await response.json()\r\n        return memberUsernames\r\n    }\r\n\r\n\r\n    async getGroupRooms(groupID) {\r\n        let response = await fetch(`/api/get-group-rooms?groupID=${groupID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true, stateLoaded: true})\r\n            return undefined\r\n        }\r\n\r\n        const rooms = await response.json()\r\n        return rooms\r\n    }\r\n\r\n\r\n    async setRoomID(roomID) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/set-user-info', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({userID: this.state.userID, attribute: 'currentRoomOpen', value: roomID})\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true, stateLoaded: true})\r\n            return undefined\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    async openRoom(newRoomName) {\r\n        if (newRoomName === this.state.currentRoomName)\r\n            return\r\n\r\n\r\n        this.state.socket.emit('leave-room', this.state.currentRoomID)\r\n\r\n        let newRoomID = null\r\n\r\n        for (let i = 0; i < this.state.groupRooms.length; i++) {\r\n            if (this.state.groupRooms[i].name === newRoomName) {\r\n                newRoomID = this.state.groupRooms[i].id\r\n                break\r\n            }\r\n        }\r\n\r\n        this.props.history.push(`/group/${this.state.groupID}/${newRoomName}`, {currentRoomName: newRoomName, groupID: this.state.groupID, groupName: this.state.groupName})\r\n    }\r\n\r\n\r\n    toggleCreateRoomComponent() {\r\n        this.setState({showCreateRoomComponent: !this.state.showCreateRoomComponent})\r\n    }\r\n\r\n\r\n    toggleBecomeAdminComponent() {\r\n        this.setState({showBecomeAdminComponent: !this.state.showBecomeAdminComponent})\r\n    }\r\n\r\n\r\n    toggleInviteUserComponent() {\r\n        this.setState({showInviteUserComponent: !this.state.showInviteUserComponent})\r\n    }\r\n\r\n\r\n    toggleLeaveGroupComponent() {\r\n        this.setState({showLeaveGroupComponent: !this.state.showLeaveGroupComponent})\r\n    }\r\n\r\n\r\n    // GIR = Group Invitation Received\r\n    closeGIRcomponent(decision) {\r\n        if (decision === \"Decline\")\r\n            this.props.history.push(\"/groups\")\r\n\r\n        this.setState({showUserReceivedGroupInvitation: false})\r\n    }\r\n\r\n\r\n    invitationSent(userInvited) {\r\n        this.setState({showInviteUserComponent: false, showInvitationSentComponent: true, userInvited: userInvited})\r\n    }\r\n\r\n\r\n    toggleInvitationSentComponent() {\r\n        this.setState({showInvitationSentComponent: !this.state.showInvitationSentComponent})\r\n    }\r\n\r\n\r\n    updateGroupAdmin(status, groupAdmin) {\r\n        if (status === \"SUCCESS\")\r\n            this.setState({showBecomeAdminComponent: false, groupAdmin: groupAdmin})\r\n        else\r\n            this.setState({showBecomeAdminComponent: false})\r\n    }\r\n\r\n\r\n    async goToNewRoom(newRoom) {\r\n        this.state.socket.emit('leave-room', this.state.currentRoomID)\r\n        this.props.history.push(`/group/${this.state.groupID}/${newRoom.name}`)\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.stateLoaded)\r\n            return <Loading/>\r\n\r\n\r\n        if (!this.state.showGroup) {\r\n            return (\r\n                <AccessGroupDenied/>\r\n            )\r\n        }\r\n\r\n        if (!this.state.roomFound) {\r\n            return (\r\n                <PageNotFound/>\r\n            )\r\n        }\r\n\r\n        if (!this.state.isLoggedIn)\r\n            return <Redirect to=\"/login\"/>\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"left-container\">\r\n                    <div className=\"lc-outer-container\">\r\n                        <div className=\"lc-inner-container\">\r\n                            <h3>{this.state.groupName}</h3>\r\n                            <hr/>\r\n\r\n                            <div className=\"group-roomnames\" key={uuidv4()}>\r\n                                <h5><strong>Rooms</strong></h5>\r\n\r\n                                {\r\n                                    this.state.groupRooms.map(room => {\r\n                                        if (room.name === this.state.currentRoomName)\r\n                                            return (\r\n                                                <div className=\"current-group-room-link\" key={room.name}>\r\n                                                    {room.name}\r\n                                                </div>\r\n                                            )\r\n                                        else\r\n                                            return (\r\n                                                <div className=\"new-group-room-link\" key={room.name} onClick={() => this.openRoom(room.name)}>\r\n                                                    {room.name}\r\n                                                </div>\r\n                                            )\r\n                                    })\r\n                                }\r\n\r\n                                <button onClick={this.toggleCreateRoomComponent}>Create a room</button>\r\n                            </div>\r\n\r\n                            <div className=\"group-admin-container\">\r\n                                <h5><strong>Admin</strong></h5>\r\n\r\n                                {\r\n                                    (this.state.groupAdmin !== null) ?\r\n\r\n                                    <div className=\"admin-exists-container\">\r\n                                        {this.state.groupMembers[this.state.groupAdmin]}\r\n                                    </div>\r\n\r\n                                    :\r\n\r\n                                    <div className=\"admin-missing-container\">\r\n                                        <p><em>None</em></p>\r\n                                        <button onClick={this.toggleBecomeAdminComponent}>Become Admin</button>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n\r\n\r\n                            <div className=\"invite-users-category\">\r\n                                <button onClick={this.toggleInviteUserComponent}>+ Invite User</button>\r\n                            </div>\r\n\r\n                            <div className=\"leave-group-category\">\r\n                                <button onClick={this.toggleLeaveGroupComponent}>Leave Group</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"right-container\">\r\n                    <GroupRoom key={this.state.childKey} roomName={this.state.currentRoomName} roomID={this.state.currentRoomID} groupName={this.state.groupName} groupID={this.state.groupID} roomMembers={this.state.groupMembers} userID={this.state.userID} socket={this.state.socket} displayError={this.toggleErrorComponent}/>\r\n                </div>\r\n\r\n                {this.state.showUserReceivedGroupInvitation && <GroupInvitationReceived groupID={this.state.groupID} groupName={this.state.groupName} closeComponent={this.closeGIRcomponent}/>}\r\n                {this.state.showInviteUserComponent && <InviteUser sender={this.state.userID} groupID={this.state.groupID} groupName={this.state.groupName} groupMembers={this.state.groupMembers} closeComponent={this.toggleInviteUserComponent} invitationSent={this.invitationSent}/>}\r\n                {this.state.showInvitationSentComponent && <InvitationSent recipient={this.state.userInvited} closeComponent={this.toggleInvitationSentComponent}/>}\r\n                {this.state.showLeaveGroupComponent && <LeaveGroup userID={this.state.userID} groupName={this.state.groupName} groupID={this.state.groupID} closeComponent={this.toggleLeaveGroupComponent}/>}\r\n                {this.state.showBecomeAdminComponent && <BecomeAdmin groupName={this.state.groupName} groupID={this.state.groupID} userID={this.state.userID} closeComponent={this.toggleBecomeAdminComponent} updateGroupAdmin={this.updateGroupAdmin}/>}\r\n                {this.state.showCreateRoomComponent && <CreateRoom groupID={this.state.groupID} rooms={this.state.groupRooms} roomMembers={this.state.groupMembers} creator={this.state.userID} closeComponent={this.toggleCreateRoomComponent} goToNewRoom={this.goToNewRoom}/>}\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Group\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\invite-user.js",["248","249","250"],"import React from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport \"../../styles/invite-user.css\"\r\nimport Error from './error'\r\nimport Cookies from \"js-cookie\"\r\n\r\n\r\nclass InviteUser extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            displayError: false\r\n        }\r\n\r\n        this.validateForm = this.validateForm.bind(this)\r\n        this.hideErrorMessage = this.hideErrorMessage.bind(this)\r\n        this.usernameIsValid = this.usernameIsValid.bind(this)\r\n        this.getUserID = this.getUserID.bind(this)\r\n        this.userExists = this.userExists.bind(this)\r\n        this.userAlreadyReceivedInvite = this.userAlreadyReceivedInvite.bind(this)\r\n        this.sendInvitation = this.sendInvitation.bind(this)\r\n        this.getDate = this.getDate.bind(this)\r\n        this.getTime = this.getTime.bind(this)\r\n\r\n        this.handleKeyPress = this.handleKeyPress.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async validateForm() {\r\n        this.hideErrorMessage()\r\n\r\n        const recipientUsername = document.getElementById(\"username-input\").value.trim()\r\n\r\n        if (!this.usernameIsValid(recipientUsername))\r\n            return\r\n\r\n\r\n        const recipientID = await this.getUserID(recipientUsername)\r\n\r\n        if (recipientID === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n\r\n        if (!this.userExists(recipientID))\r\n            return\r\n\r\n\r\n        const userReceivedInvite = await this.userAlreadyReceivedInvite(recipientID)\r\n\r\n        if (userReceivedInvite === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n        if (userReceivedInvite === true || userReceivedInvite === undefined)\r\n            return\r\n\r\n\r\n        const status = await this.sendInvitation(recipientID)\r\n\r\n        if (status === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n        this.props.invitationSent(recipientUsername)\r\n    }\r\n\r\n\r\n    hideErrorMessage() {\r\n        document.getElementById(\"iu-error-message\").style.visibility = \"hidden\"\r\n    }\r\n\r\n\r\n    usernameIsValid(username) {\r\n        if (username === \"\") {\r\n            document.getElementById(\"iu-error-message\").innerHTML = \"This field is required\"\r\n            document.getElementById(\"iu-error-message\").style.visibility = \"visible\"\r\n            return false\r\n        }\r\n\r\n\r\n        // Checks to see if the user is inviting themselves\r\n        if (this.props.groupMembers[this.props.sender] === username) {\r\n            document.getElementById(\"iu-error-message\").innerHTML = \"You're already a member of this group :)\"\r\n            document.getElementById(\"iu-error-message\").style.visibility = \"visible\"\r\n            return false\r\n        }\r\n\r\n\r\n        // Checks to see if the username of the user provided is already a member\r\n        for (const key in this.props.groupMembers) {\r\n            if (this.props.groupMembers[key] === username) {\r\n                document.getElementById(\"iu-error-message\").innerHTML = \"This user is already a member\"\r\n                document.getElementById(\"iu-error-message\").style.visibility = \"visible\"\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    async getUserID(username) {\r\n        const response = await fetch(`/api/get-user-id?username=${username}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const id = await response.text()\r\n        return id\r\n    }\r\n\r\n\r\n    userExists(userID) {\r\n        if (userID === \"\") {\r\n            document.getElementById(\"iu-error-message\").innerHTML = \"This user doesn't exist\"\r\n            document.getElementById(\"iu-error-message\").style.visibility = \"visible\"\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    // Checks to see if the user already received the notification\r\n    async userAlreadyReceivedInvite(recipientID) {\r\n        const response = await fetch(`/api/notification-check?userID=${recipientID}&type=group-invitation&attribute=groupID&value=${this.props.groupID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        const result = await response.text()\r\n\r\n        if (result === \"USER-RECEIVED-NOTIFICATION\") {\r\n            document.getElementById(\"iu-error-message\").innerHTML = \"An invitation has already been sent to this user\"\r\n            document.getElementById(\"iu-error-message\").style.visibility = \"visible\"\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    async sendInvitation(recipient) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/send-notification', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({\r\n                id: uuidv4(),\r\n                type: \"group-invitation\",\r\n                message: `${this.props.groupMembers[this.props.sender]} invited you to join their group ${this.props.groupName}`,\r\n                sender: this.props.sender,\r\n                recipient: recipient,\r\n                groupID: this.props.groupID,\r\n                groupName: this.props.groupName,\r\n                date: this.getDate(),\r\n                time: this.getTime(),\r\n                timeToLive: Math.ceil(this.getTime() / 1000) + (60 * 60 * 24 * 7) // 7 days from now (in seconds)\r\n            })\r\n        })\r\n\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"SUCCESS\"\r\n    }\r\n\r\n\r\n    getDate() {\r\n      const dateObj = new Date();\r\n\r\n      const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ];\r\n\r\n      return `${months[dateObj.getMonth()]} ${dateObj.getDate()}, ${dateObj.getFullYear()}`;\r\n    }\r\n\r\n\r\n    getTime() {\r\n        const today = new Date()\r\n        return today.getTime()\r\n    }\r\n\r\n\r\n    handleKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault()\r\n            this.validateForm()\r\n        }\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"invite-user-container\">\r\n                {/* The purpose of the div immediately below is to provide a slightly dark background for when this component becomes visible */}\r\n                <div className=\"dark-background\" onClick={this.props.closeComponent}>\r\n                </div>\r\n\r\n                <form className=\"invite-user-form\">\r\n                    <div className=\"iu-form-top\">\r\n                        <div className=\"iu-form-title\">\r\n                            <h2>Invite User</h2>\r\n                        </div>\r\n\r\n                        <div className=\"iu-form-closer\">\r\n                            <button className=\"iu-close-form-btn\" type=\"button\" onClick={this.props.closeComponent}>&#10006;</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr/>\r\n\r\n                    <div className=\"iu-form-middle\">\r\n                        <label>Username</label> <br/>\r\n                        <input id=\"username-input\" autoComplete=\"off\" onKeyPress={this.handleKeyPress}/> <br/>\r\n                        <p id=\"iu-error-message\">This field is required</p>\r\n                        <br/><br/>\r\n                    </div>\r\n\r\n                    <div className=\"iu-form-bottom\">\r\n                        <div className=\"iu-form-bottom-container\">\r\n                            <button className=\"iu-form-bottom-btn iu-btn-1\" type=\"button\" onClick={this.props.closeComponent}>Cancel</button>\r\n                            <button className=\"iu-form-bottom-btn iu-btn-2\" type=\"button\" onClick={this.validateForm}>Send Invitation</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default InviteUser\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\loading.js",[],"C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\modify-profile-info.js",["251","252"],"import React from 'react'\r\nimport Error from \"./error\"\r\nimport Cookies from \"js-cookie\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport \"../../styles/modify-profile-info.css\"\r\n\r\n\r\nclass ModifyProfileInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            showPopupMenu: false,\r\n            displayError: false\r\n        }\r\n\r\n        this.modifyInfo = this.modifyInfo.bind(this)\r\n        this.hideErrorMessages = this.hideErrorMessages.bind(this)\r\n        this.inputIsValid = this.inputIsValid.bind(this)\r\n        this.passwordIsValid = this.passwordIsValid.bind(this)\r\n        this.setUserInfo = this.setUserInfo.bind(this)\r\n        this.togglePopupMenu = this.togglePopupMenu.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async modifyInfo(attribute) {\r\n        this.hideErrorMessages()\r\n\r\n        const newValue = document.getElementById(\"newValue-input\").value.trim()\r\n        const password = document.getElementById(\"password-input\").value\r\n\r\n        if (!this.inputIsValid(attribute, newValue, password))\r\n            return\r\n\r\n\r\n        const passwordValid = await this.passwordIsValid(password)\r\n\r\n        if (passwordValid === \"ERROR-OCCURRED\" || !passwordValid)\r\n            return\r\n\r\n\r\n        const result = await this.setUserInfo(attribute, newValue)\r\n\r\n        if (result === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n\r\n        if (attribute !== \"password\")\r\n            this.props.updateInfo(attribute, newValue)\r\n\r\n        this.setState({showPopupMenu: false})\r\n    }\r\n\r\n\r\n    hideErrorMessages() {\r\n        document.getElementById(\"mpi-attribute-label\").innerText = this.props.attribute.toUpperCase()\r\n        document.getElementById(\"mpi-password-label\").innerText = \"CURRENT PASSWORD\"\r\n    }\r\n\r\n\r\n    inputIsValid(attribute, newValue, password) {\r\n        if (newValue === \"\") {\r\n            const errorTag = document.createElement(\"span\")\r\n            const text = document.createTextNode(\" - This field is required\")\r\n            errorTag.className = \"error-message-profile\"\r\n            errorTag.appendChild(text)\r\n\r\n            document.getElementById(\"mpi-attribute-label\").innerHTML = attribute.toUpperCase() + errorTag.outerHTML\r\n            return false\r\n        }\r\n\r\n        if (attribute === \"password\" && newValue.length < 8) {\r\n            const errorTag = document.createElement(\"span\")\r\n            const text = document.createTextNode(\" - Needs to be at least 8 characters\")\r\n            errorTag.className = \"error-message-profile\"\r\n            errorTag.appendChild(text)\r\n\r\n            document.getElementById(\"mpi-attribute-label\").innerHTML = \"PASSWORD\" + errorTag.outerHTML\r\n            return false\r\n        }\r\n\r\n        if (password === \"\") {\r\n            const errorTag = document.createElement(\"span\")\r\n            const text = document.createTextNode(\" - Password is incorrect\")\r\n            errorTag.className = \"error-message-profile\"\r\n            errorTag.appendChild(text)\r\n\r\n            document.getElementById(\"mpi-password-label\").innerHTML = \"CURRENT PASSWORD\" + errorTag.outerHTML\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    async passwordIsValid(password) {\r\n        const response = await fetch(`/api/verify-password?userID=${this.props.userID}&password=${password}`)\r\n        const status = await response.text()\r\n\r\n        if (response.status === 200)\r\n            return true\r\n\r\n        if (response.status === 500) {\r\n            const errorTag = document.createElement(\"span\")\r\n            const text = document.createTextNode(\" - Password is incorrect\")\r\n            errorTag.className = \"error-message-profile\"\r\n            errorTag.appendChild(text)\r\n\r\n            document.getElementById(\"mpi-password-label\").innerHTML = \"CURRENT PASSWORD\" + errorTag.outerHTML\r\n            return false\r\n        }\r\n\r\n        this.setState({displayError: true})\r\n        return false\r\n    }\r\n\r\n\r\n    async setUserInfo(attribute, newValue) {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch('/api/set-user-info', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({userID: this.props.userID, email: this.props.email, attribute: attribute, value: newValue})\r\n        })\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    togglePopupMenu() {\r\n        this.setState({showPopupMenu: !this.state.showPopupMenu})\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"profile-container\" key={uuidv4()}>\r\n                <div className=\"profile-info\">\r\n                    <label>{this.props.attribute.toUpperCase()}</label>\r\n                    <p>{this.props.value}</p>\r\n                </div>\r\n\r\n                <div className=\"modify-profile-info\">\r\n                    <button className=\"edit-btn\" onClick={this.togglePopupMenu}>EDIT</button>\r\n                </div>\r\n\r\n                {\r\n                    this.state.showPopupMenu &&\r\n\r\n                    <div>\r\n                        {/* The purpose of the div immediately below is to provide a slightly dark background for when this component becomes visible */}\r\n                        <div className=\"dark-background\" onClick={this.togglePopupMenu}>\r\n\r\n                        </div>\r\n\r\n                        <form className=\"modify-profile-info-form\">\r\n                            <div className=\"mpi-form-top\">\r\n                                <div className=\"mpi-form-title\">\r\n                                    <h2>Change your {this.props.attribute}</h2>\r\n                                </div>\r\n\r\n                                <div className=\"mpi-form-closer\">\r\n                                    <button className=\"mpi-close-form-btn\" type=\"button\" onClick={this.togglePopupMenu}>&#10006;</button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <hr/>\r\n\r\n                            <div className=\"mpi-form-middle\">\r\n                                <p>Enter a new {this.props.attribute} and your existing password.</p>\r\n\r\n                                <label id=\"mpi-attribute-label\" htmlFor=\"newValue-input\">{this.props.attribute.toUpperCase()}</label>\r\n                                {this.props.attribute === \"name\" && <input type=\"text\" id=\"newValue-input\"/>}\r\n                                {this.props.attribute === \"password\" && <input type=\"password\" id=\"newValue-input\"/>}\r\n                                <br/>\r\n                                <br/>\r\n\r\n                                <label id=\"mpi-password-label\" htmlFor=\"password-input\">CURRENT PASSWORD</label>\r\n                                <input type=\"password\" id=\"password-input\"/>\r\n                            </div>\r\n\r\n                            <div className=\"mpi-form-bottom\">\r\n                                <div className=\"mpi-form-bottom-container\">\r\n                                    <button className=\"mpi-form-bottom-btn update-profile-info-btn-1\" type=\"button\" onClick={this.togglePopupMenu}>Cancel</button>\r\n                                    <button className=\"mpi-form-bottom-btn update-profile-info-btn-2\" type=\"button\" onClick={() => this.modifyInfo(this.props.attribute)}>Change</button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                }\r\n\r\n                { this.state.displayError && <Error closeComponent={this.toggleErrorComponent}/> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ModifyProfileInfo\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\invitation-sent.js",["253"],"import React from 'react'\r\nimport \"../../styles/invitation-sent.css\"\r\n\r\n\r\nclass InvitationSent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"invitation-sent-container\">\r\n                {/* The purpose of the div immediately below is to provide a slightly dark background for when this component becomes visible */}\r\n                <div className=\"dark-background\" onClick={this.props.closeComponent}>\r\n                </div>\r\n\r\n                <form className=\"invitation-sent-form\">\r\n                    <div className=\"is-form-top\">\r\n                        <div className=\"is-form-title\">\r\n                            <h2>Invitation Sent</h2>\r\n                        </div>\r\n\r\n                        <div className=\"is-form-closer\">\r\n                            <button className=\"is-close-form-btn\" type=\"button\" onClick={this.props.closeComponent}>&#10006;</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr/>\r\n\r\n                    <div className=\"is-form-middle\">\r\n                        <p>An invitation has been sent to <strong>{this.props.recipient}</strong></p>\r\n                    </div>\r\n\r\n                    <div className=\"is-form-bottom\">\r\n                        <div className=\"is-form-bottom-container\">\r\n                            <button className=\"is-form-bottom-btn\" type=\"button\" onClick={this.props.closeComponent}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default InvitationSent\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\access-group-denied.js",["254"],"import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport AccessDeniedIcon from \"../../images/access-denied.png\"\r\nimport \"../../styles/access-group-denied.css\"\r\n\r\n\r\nclass AccessGroupDenied extends React.Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"access-group-denied-container\">\r\n                <h3>Stop right there!</h3>\r\n                <p>\r\n                    This is a private group, which means that you can only view its contents <strong><em>if</em></strong> you're\r\n                    personally invited by one of its members.\r\n                </p>\r\n\r\n                <div className=\"access-group-denied-icon-container\">\r\n                    <img className=\"access-group-denied-icon\" src={AccessDeniedIcon} alt=\"access denied\"/>\r\n                </div>\r\n\r\n                <br/>\r\n\r\n                <div className=\"access-group-denied-container-link access-group-denied-btn1\">\r\n                    <Link to=\"/home\" className=\"agd-link\">\r\n                        Home\r\n                    </Link>\r\n                </div>\r\n\r\n                <div className=\"access-group-denied-container-link\">\r\n                    <Link to=\"/groups\" className=\"agd-link\">\r\n                        Groups\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default AccessGroupDenied\r\n","C:\\Users\\Zul-Kifl Alidou\\Desktop\\Chatter\\client\\src\\components\\logged-in\\group-invitation-received.js",["255","256"],"import React from \"react\"\r\nimport \"../../styles/group-invitation-received.css\"\r\n\r\nimport jwt_decode from \"jwt-decode\"\r\nimport Cookies from \"js-cookie\"\r\nimport Error from \"./error\"\r\n\r\n\r\nclass GroupInvitationReceived extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            userID: (Cookies.get(\"jwtHP\") === undefined) ? null : jwt_decode(Cookies.get(\"jwtHP\")).userID,\r\n            displayError: false\r\n        }\r\n\r\n        this.handleDecision = this.handleDecision.bind(this)\r\n        this.acceptInvitation = this.acceptInvitation.bind(this)\r\n        this.deleteNotification = this.deleteNotification.bind(this)\r\n        this.toggleErrorComponent = this.toggleErrorComponent.bind(this)\r\n    }\r\n\r\n\r\n    async handleDecision(decision) {\r\n        if (decision === \"Accept\") {\r\n            const status = this.acceptInvitation()\r\n\r\n            if (status === \"ERROR-OCCURRED\")\r\n                return\r\n        }\r\n\r\n\r\n        const status = this.deleteNotification()\r\n\r\n        if (status === \"ERROR-OCCURRED\")\r\n            return\r\n\r\n        this.props.closeComponent(decision)\r\n    }\r\n\r\n\r\n    async acceptInvitation() {\r\n        const token = Cookies.get(\"XSRF-Token\")\r\n\r\n        const response = await fetch(\"/api/accept-group-invitation\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'XSRF-Token': token\r\n            },\r\n            body: JSON.stringify({\r\n                userID: this.state.userID,\r\n                groupID: this.props.groupID\r\n            })\r\n        })\r\n\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    async deleteNotification() {\r\n        const response = await fetch(`/api/delete-notification?userID=${this.state.userID}&groupID=${this.props.groupID}`)\r\n\r\n        try {\r\n            if (response.status !== 200)\r\n                throw \"ERROR-OCCURRED\"\r\n        } catch (e) {\r\n            this.setState({displayError: true})\r\n            return \"ERROR-OCCURRED\"\r\n        }\r\n\r\n        return \"Success\"\r\n    }\r\n\r\n\r\n    toggleErrorComponent() {\r\n        this.setState({displayError: !this.state.displayError})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* The purpose of the div immediately below is to provide a slightly dark background for when this component becomes visible */}\r\n                <div className=\"dark-background\">\r\n                </div>\r\n\r\n                <form className=\"group-invitation-received-form\">\r\n                    <div className=\"gir-form-top\">\r\n                        <div className=\"gir-form-title\">\r\n                            <h3>You have received a group invitation</h3>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr/>\r\n\r\n                    <div className=\"gir-form-middle\">\r\n                        <p>You have received an invitation to become a member of the group <strong>{this.props.groupName}</strong>. Would you like to join them?</p>\r\n                    </div>\r\n\r\n                    <div className=\"gir-form-bottom\">\r\n                        <div className=\"gir-form-bottom-container\">\r\n                            <button className=\"gir-form-bottom-btn gir-decline-btn\" type=\"button\" onClick={() => this.handleDecision(\"Decline\")}>Decline</button>\r\n                            <button className=\"gir-form-bottom-btn gir-accept-btn\" type=\"button\" onClick={() => this.handleDecision(\"Accept\")}>Accept</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                {this.state.displayError && <Error closeComponent={this.toggleErrorComponent} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GroupInvitationReceived\r\n",{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","severity":1,"message":"262","line":13,"column":8,"nodeType":"263","messageId":"264","endLine":13,"endColumn":22},{"ruleId":"261","severity":1,"message":"265","line":14,"column":8,"nodeType":"263","messageId":"264","endLine":14,"endColumn":33},{"ruleId":"261","severity":1,"message":"266","line":21,"column":8,"nodeType":"263","messageId":"264","endLine":21,"endColumn":18},{"ruleId":"261","severity":1,"message":"267","line":22,"column":8,"nodeType":"263","messageId":"264","endLine":22,"endColumn":19},{"ruleId":"261","severity":1,"message":"268","line":23,"column":8,"nodeType":"263","messageId":"264","endLine":23,"endColumn":17},{"ruleId":"261","severity":1,"message":"269","line":24,"column":8,"nodeType":"263","messageId":"264","endLine":24,"endColumn":18},{"ruleId":"261","severity":1,"message":"270","line":25,"column":8,"nodeType":"263","messageId":"264","endLine":25,"endColumn":19},{"ruleId":"261","severity":1,"message":"271","line":26,"column":8,"nodeType":"263","messageId":"264","endLine":26,"endColumn":18},{"ruleId":"261","severity":1,"message":"272","line":27,"column":8,"nodeType":"263","messageId":"264","endLine":27,"endColumn":20},{"ruleId":"261","severity":1,"message":"273","line":30,"column":8,"nodeType":"263","messageId":"264","endLine":30,"endColumn":18},{"ruleId":"261","severity":1,"message":"274","line":31,"column":8,"nodeType":"263","messageId":"264","endLine":31,"endColumn":18},{"ruleId":"261","severity":1,"message":"275","line":33,"column":8,"nodeType":"263","messageId":"264","endLine":33,"endColumn":24},{"ruleId":"261","severity":1,"message":"276","line":34,"column":8,"nodeType":"263","messageId":"264","endLine":34,"endColumn":18},{"ruleId":"261","severity":1,"message":"277","line":37,"column":8,"nodeType":"263","messageId":"264","endLine":37,"endColumn":19},{"ruleId":"261","severity":1,"message":"278","line":38,"column":8,"nodeType":"263","messageId":"264","endLine":38,"endColumn":18},{"ruleId":"261","severity":1,"message":"279","line":40,"column":8,"nodeType":"263","messageId":"264","endLine":40,"endColumn":21},{"ruleId":"261","severity":1,"message":"280","line":42,"column":8,"nodeType":"263","messageId":"264","endLine":42,"endColumn":13},{"ruleId":"281","severity":1,"message":"282","line":50,"column":17,"nodeType":"283","messageId":"284","endLine":50,"endColumn":39},{"ruleId":"285","severity":1,"message":"286","line":121,"column":42,"nodeType":"287","messageId":"288","endLine":121,"endColumn":43,"suggestions":"289"},{"ruleId":"285","severity":1,"message":"286","line":121,"column":67,"nodeType":"287","messageId":"288","endLine":121,"endColumn":68,"suggestions":"290"},{"ruleId":"285","severity":1,"message":"286","line":121,"column":76,"nodeType":"287","messageId":"288","endLine":121,"endColumn":77,"suggestions":"291"},{"ruleId":"285","severity":1,"message":"286","line":121,"column":80,"nodeType":"287","messageId":"288","endLine":121,"endColumn":81,"suggestions":"292"},{"ruleId":"285","severity":1,"message":"286","line":61,"column":42,"nodeType":"287","messageId":"288","endLine":61,"endColumn":43,"suggestions":"293"},{"ruleId":"285","severity":1,"message":"286","line":61,"column":67,"nodeType":"287","messageId":"288","endLine":61,"endColumn":68,"suggestions":"294"},{"ruleId":"285","severity":1,"message":"286","line":61,"column":76,"nodeType":"287","messageId":"288","endLine":61,"endColumn":77,"suggestions":"295"},{"ruleId":"285","severity":1,"message":"286","line":61,"column":80,"nodeType":"287","messageId":"288","endLine":61,"endColumn":81,"suggestions":"296"},{"ruleId":"281","severity":1,"message":"282","line":74,"column":21,"nodeType":"283","messageId":"284","endLine":74,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":35,"column":21,"nodeType":"283","messageId":"284","endLine":35,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":99,"column":17,"nodeType":"283","messageId":"284","endLine":99,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":37,"column":17,"nodeType":"283","messageId":"284","endLine":37,"endColumn":39},{"ruleId":"297","severity":1,"message":"298","line":7,"column":5,"nodeType":"299","messageId":"300","endLine":9,"endColumn":6},{"ruleId":"281","severity":1,"message":"282","line":76,"column":17,"nodeType":"283","messageId":"284","endLine":76,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":101,"column":17,"nodeType":"283","messageId":"284","endLine":101,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":113,"column":17,"nodeType":"283","messageId":"284","endLine":113,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":90,"column":17,"nodeType":"283","messageId":"284","endLine":90,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":115,"column":17,"nodeType":"283","messageId":"284","endLine":115,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":130,"column":17,"nodeType":"283","messageId":"284","endLine":130,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":146,"column":17,"nodeType":"283","messageId":"284","endLine":146,"endColumn":39},{"ruleId":"297","severity":1,"message":"298","line":6,"column":5,"nodeType":"299","messageId":"300","endLine":8,"endColumn":6},{"ruleId":"297","severity":1,"message":"298","line":6,"column":5,"nodeType":"299","messageId":"300","endLine":8,"endColumn":6},{"ruleId":"281","severity":1,"message":"282","line":117,"column":17,"nodeType":"283","messageId":"284","endLine":117,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":155,"column":17,"nodeType":"283","messageId":"284","endLine":155,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":211,"column":17,"nodeType":"283","messageId":"284","endLine":211,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":245,"column":17,"nodeType":"283","messageId":"284","endLine":245,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":260,"column":17,"nodeType":"283","messageId":"284","endLine":260,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":338,"column":17,"nodeType":"283","messageId":"284","endLine":338,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":356,"column":17,"nodeType":"283","messageId":"284","endLine":356,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":86,"column":17,"nodeType":"283","messageId":"284","endLine":86,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":152,"column":17,"nodeType":"283","messageId":"284","endLine":152,"endColumn":39},{"ruleId":"261","severity":1,"message":"301","line":48,"column":15,"nodeType":"263","messageId":"264","endLine":48,"endColumn":32},{"ruleId":"281","severity":1,"message":"282","line":58,"column":17,"nodeType":"283","messageId":"284","endLine":58,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":139,"column":17,"nodeType":"283","messageId":"284","endLine":139,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":189,"column":17,"nodeType":"283","messageId":"284","endLine":189,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":85,"column":17,"nodeType":"283","messageId":"284","endLine":85,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":110,"column":17,"nodeType":"283","messageId":"284","endLine":110,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":126,"column":17,"nodeType":"283","messageId":"284","endLine":126,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":152,"column":17,"nodeType":"283","messageId":"284","endLine":152,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":83,"column":17,"nodeType":"283","messageId":"284","endLine":83,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":195,"column":17,"nodeType":"283","messageId":"284","endLine":195,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":210,"column":17,"nodeType":"283","messageId":"284","endLine":210,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":229,"column":17,"nodeType":"283","messageId":"284","endLine":229,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":245,"column":17,"nodeType":"283","messageId":"284","endLine":245,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":308,"column":17,"nodeType":"283","messageId":"284","endLine":308,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":35,"column":17,"nodeType":"283","messageId":"284","endLine":35,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":243,"column":17,"nodeType":"283","messageId":"284","endLine":243,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":259,"column":17,"nodeType":"283","messageId":"284","endLine":259,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":275,"column":17,"nodeType":"283","messageId":"284","endLine":275,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":291,"column":17,"nodeType":"283","messageId":"284","endLine":291,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":307,"column":17,"nodeType":"283","messageId":"284","endLine":307,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":332,"column":17,"nodeType":"283","messageId":"284","endLine":332,"endColumn":39},{"ruleId":"261","severity":1,"message":"302","line":353,"column":17,"nodeType":"263","messageId":"264","endLine":353,"endColumn":26},{"ruleId":"281","severity":1,"message":"282","line":108,"column":17,"nodeType":"283","messageId":"284","endLine":108,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":136,"column":17,"nodeType":"283","messageId":"284","endLine":136,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":179,"column":17,"nodeType":"283","messageId":"284","endLine":179,"endColumn":39},{"ruleId":"261","severity":1,"message":"303","line":99,"column":15,"nodeType":"263","messageId":"264","endLine":99,"endColumn":21},{"ruleId":"281","severity":1,"message":"282","line":133,"column":17,"nodeType":"283","messageId":"284","endLine":133,"endColumn":39},{"ruleId":"297","severity":1,"message":"298","line":6,"column":5,"nodeType":"299","messageId":"300","endLine":8,"endColumn":6},{"ruleId":"297","severity":1,"message":"298","line":9,"column":5,"nodeType":"299","messageId":"300","endLine":11,"endColumn":6},{"ruleId":"281","severity":1,"message":"282","line":61,"column":17,"nodeType":"283","messageId":"284","endLine":61,"endColumn":39},{"ruleId":"281","severity":1,"message":"282","line":76,"column":17,"nodeType":"283","messageId":"284","endLine":76,"endColumn":39},"no-native-reassign",["304"],"no-negated-in-lhs",["305"],"no-unused-vars","'SetNewPassword' is defined but never used.","Identifier","unusedVar","'PasswordSuccessfullyReset' is defined but never used.","'RandomRoom' is defined but never used.","'UsersOnline' is defined but never used.","'GroupRoom' is defined but never used.","'CreateRoom' is defined but never used.","'CreateGroup' is defined but never used.","'ShowGroups' is defined but never used.","'ShowNoGroups' is defined but never used.","'InviteUser' is defined but never used.","'MessageBox' is defined but never used.","'NotificationsBox' is defined but never used.","'NavbarMenu' is defined but never used.","'BecomeAdmin' is defined but never used.","'LeaveGroup' is defined but never used.","'DeleteAccount' is defined but never used.","'Error' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["306","307"],["308","309"],["310","311"],["312","313"],["314","315"],["316","317"],["318","319"],["320","321"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'messagesContainer' is assigned a value but never used.","'newRoomID' is assigned a value but never used.","'status' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"322","fix":"323","desc":"324"},{"messageId":"325","fix":"326","desc":"327"},{"messageId":"322","fix":"328","desc":"324"},{"messageId":"325","fix":"329","desc":"327"},{"messageId":"322","fix":"330","desc":"324"},{"messageId":"325","fix":"331","desc":"327"},{"messageId":"322","fix":"332","desc":"324"},{"messageId":"325","fix":"333","desc":"327"},{"messageId":"322","fix":"334","desc":"324"},{"messageId":"325","fix":"335","desc":"327"},{"messageId":"322","fix":"336","desc":"324"},{"messageId":"325","fix":"337","desc":"327"},{"messageId":"322","fix":"338","desc":"324"},{"messageId":"325","fix":"339","desc":"327"},{"messageId":"322","fix":"340","desc":"324"},{"messageId":"325","fix":"341","desc":"327"},"removeEscape",{"range":"342","text":"343"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"344","text":"345"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"346","text":"343"},{"range":"347","text":"345"},{"range":"348","text":"343"},{"range":"349","text":"345"},{"range":"350","text":"343"},{"range":"351","text":"345"},{"range":"352","text":"343"},{"range":"353","text":"345"},{"range":"354","text":"343"},{"range":"355","text":"345"},{"range":"356","text":"343"},{"range":"357","text":"345"},{"range":"358","text":"343"},{"range":"359","text":"345"},[4117,4118],"",[4117,4117],"\\",[4142,4143],[4142,4142],[4151,4152],[4151,4151],[4155,4156],[4155,4155],[1737,1738],[1737,1737],[1762,1763],[1762,1762],[1771,1772],[1771,1771],[1775,1776],[1775,1775]]